[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "eBird Status and Trends",
    "section": "",
    "text": "Introduction\nThis website houses the notes for a workshop on the eBird Status and Trends Data Products presented at the The Wildlife Society (TWS) Conference in November 2023. The workshop will be divided into two lessons covering the eBird Status Data Products and the eBird Trends Data Products. In each section, we demonstrate how to download the data, load it into R, and use it for some common conservation and management applications."
  },
  {
    "objectID": "index.html#sec-intro-setup",
    "href": "index.html#sec-intro-setup",
    "title": "eBird Status and Trends",
    "section": "Setup",
    "text": "Setup\n\nSoftware\nThis workshop is intended to be interactive. All examples are written in the R programming language, and the instructor will work through the examples in real time, while the attendees are encouraged following along by writing the same code. To ensure we can avoid any unnecessary delays, please follow these setup instructions prior to the workshop:\n\nCreate an eBird account if you don’t already have one and request access to the eBird Status and Trends Data Products by filling out the access request form at: https://science.ebird.org/en/status-and-trends/download-data\nDownload and install the latest version of R. You must have R version 4.0.0 or newer to follow along with this workshop\nDownload and install the latest version of RStudio. RStudio is not required for this workshop; however, the instructors will be using it and you may find it easier to following along if you’re working in the same environment.\nWorking with the eBird Status and Trends Data Products in R requires the ebirdst R package. Install the latest version from GitHub by running the following code:\n\n\nif (!requireNamespace(\"remotes\", quietly = TRUE)) {\n  install.packages(\"remotes\")\n}\nremotes::install_github(\"ebird/ebirdst\", ref = \"trends\")\n\n\nEnsure all packages are updated to their most recent versions by clicking on the “Update” button on the “Packages” tab in RStudio.\n\n\n\nData\nFor those working through the notes on their own, all the required data will be downloaded as needed during the lessons; however, for those attending the workshop, having 30 people attempt to download a large amount of data on the same WiFi connect can pose a problem. With that in mind, attendees will be asked to download data in advance by running the following code:\n\n# download data package\ntd &lt;- file.path(tempdir(), \"ebirdst-workshop-data\")\ndir.create(td, recursive = TRUE, showWarnings = FALSE)\ntf &lt;- file.path(td, \"data.zip\")\ndownload.file(\"https://cornell.box.com/shared/static/qn7knt6o865853uhbqqlr9fhz3mj1mhk.zip\", \n              destfile = tf)\n\n# unzip\nunzip(tf, exdir = td)\nsource_dir &lt;- file.path(td, \"2022\")\ndest_dir &lt;- ebirdst::ebirdst_data_dir()\nfile.copy(source_dir, dest_dir, recursive = TRUE, overwrite = TRUE)\n\n# clean up\nunlink(td, recursive = TRUE)"
  },
  {
    "objectID": "index.html#sec-intro-background",
    "href": "index.html#sec-intro-background",
    "title": "eBird Status and Trends",
    "section": "Background knowledge",
    "text": "Background knowledge\n\nTidyverse\nThroughout this workshop, we use packages from the Tidyverse, an opinionated collection of R packages designed for data science. Packages such as ggplot2, for data visualization, and dplyr, for data manipulation, are two of the most well known Tidyverse packages; however, there are many more. We’ll try to explain any functions as they come up; however, for a good general resource on working with data in R using the Tidyverse see the free online book R for Data Science by Hadley Wickham.\nThe one piece of the Tidyverse that we will cover up front is the pipe operator %&gt;%. The pipe takes the expression to the left of it and “pipes” it into the first argument of the expression on the right.\n\nlibrary(dplyr)\n\n# without pipe\nmean(1:10)\n#&gt; [1] 5.5\n\n# with pipe\n1:10 %&gt;% mean()\n#&gt; [1] 5.5\n\nThe pipe can code significantly more readable by avoiding nested function calls, reducing the need for intermediate variables, and making sequential operations read left-to-right. For example, to add a new variable to a data frame, then summarize using a grouping variable, the following are equivalent:\n\n# intermediate variables\nmtcars_kg &lt;- mutate(mtcars, wt_kg = 454 * wt)\nmtcars_grouped &lt;- group_by(mtcars_kg, cyl)\nsummarize(mtcars_grouped, wt_kg = mean(wt_kg))\n#&gt; # A tibble: 3 × 2\n#&gt;     cyl wt_kg\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1     4 1038.\n#&gt; 2     6 1415.\n#&gt; 3     8 1816.\n\n# nested function calls\nsummarize(\n  group_by(\n    mutate(mtcars, wt_kg = 454 * wt),\n    cyl\n  ),\n  wt_kg = mean(wt_kg)\n)\n#&gt; # A tibble: 3 × 2\n#&gt;     cyl wt_kg\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1     4 1038.\n#&gt; 2     6 1415.\n#&gt; 3     8 1816.\n\n# pipes\nmtcars %&gt;% \n  mutate(wt_kg = 454 * wt) %&gt;% \n  group_by(cyl) %&gt;% \n  summarize(wt_kg = mean(wt_kg))\n#&gt; # A tibble: 3 × 2\n#&gt;     cyl wt_kg\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1     4 1038.\n#&gt; 2     6 1415.\n#&gt; 3     8 1816.\n\n\n\n\n\n\n\nExercise\n\n\n\nRewrite the following code using pipes:\n\nset.seed(1)\nround(log(runif(10, min = 0.5)), 1)\n#&gt;  [1] -0.5 -0.4 -0.2  0.0 -0.5 -0.1  0.0 -0.2 -0.2 -0.6\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nset.seed(1)\nrunif(10, min = 0.5) %&gt;% \n  log() %&gt;% \n  round(digits = 1)\n#&gt;  [1] -0.5 -0.4 -0.2  0.0 -0.5 -0.1  0.0 -0.2 -0.2 -0.6\n\n\n\n\n\n\nWorking with spatial data in R\nThe Status and Trends Data Products are mostly spatial data in one of the following formats:\n\nRaster: values assigned to a regular grid of square cells. Data products of this type are stored in GeoTIFF format and we use the R package terra to work with them. vector\nPolygons: polygon boundaries with attribute data assigned to each polygon. Data products of this type (e.g. range polgyons) are stored in GeoPackage format and we use the R package sf to work with them.\nPoints: point locations defined by a pair of coordinates with attribute data assigned to each point. Data products of this type are stored in CSV or Parquet format and we work with these data in R as data frames or in an excplicitly spatial format using the sf package.\n\nSome familiarity of the main spatial R packages sf and terra will be useful for following along with this workshop. The free online book Geocomputation with R is a good resource on working with spatial data in R."
  },
  {
    "objectID": "status.html#sec-status-access",
    "href": "status.html#sec-status-access",
    "title": "1  eBird Status Data Products",
    "section": "1.1 Data access",
    "text": "1.1 Data access\nAccess to the eBird Status Data Products is granted through an Access Request Form at: https://ebird.org/st/request. The terms of use have been desiged to be quite permissive in many cases, particularly academic and research use. After reading the eBird Status and Trends Data Products Terms of Use and filling out the Access Request Form you will be provided with an alphanumeric access key. To store the access key so it can be accessed by R and the ebirdst package, run the following (replacing \"XXXXXXXXX\" with your actual key):\n\nset_ebirdst_access_key(\"XXXXXXXXX\")\n\nThis will save the access key as the environment variable EBIRDST_KEY in your .Renviron file so it’s accessible within your R session. You only need to do this once to store the key.\n\n\n\n\n\n\nCheckpoint\n\n\n\nTo ensure your data access key is working, attempt run the following code, which will two small files. Speak to the instructor if this doesn’t work.\n\nebirdst_download_status(\"abetow\", \n                        pattern = \"abundance_median_27km_2022\", \n                        force = TRUE)"
  },
  {
    "objectID": "status.html#sec-status-species",
    "href": "status.html#sec-status-species",
    "title": "1  eBird Status Data Products",
    "section": "1.2 eBird Status species",
    "text": "1.2 eBird Status species\nThe ebirdst_runs object is a data frame listing all the available species:\n\nglimpse(ebirdst_runs)\n#&gt; Rows: 1,113\n#&gt; Columns: 28\n#&gt; $ species_code                   &lt;chr&gt; \"abetow\", \"acafly\", \"acowoo\", \"affeag1\"…\n#&gt; $ scientific_name                &lt;chr&gt; \"Melozone aberti\", \"Empidonax virescens…\n#&gt; $ common_name                    &lt;chr&gt; \"Abert's Towhee\", \"Acadian Flycatcher\",…\n#&gt; $ is_resident                    &lt;lgl&gt; TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, F…\n#&gt; $ breeding_quality               &lt;chr&gt; NA, \"3\", NA, NA, \"3\", NA, \"1\", \"3\", NA,…\n#&gt; $ breeding_start                 &lt;date&gt; NA, 2022-05-24, NA, NA, 2022-06-21, NA…\n#&gt; $ breeding_end                   &lt;date&gt; NA, 2022-08-02, NA, NA, 2022-07-12, NA…\n#&gt; $ nonbreeding_quality            &lt;chr&gt; NA, \"3\", NA, NA, \"1\", NA, \"1\", \"3\", NA,…\n#&gt; $ nonbreeding_start              &lt;date&gt; NA, 2022-12-06, NA, NA, 2022-11-15, NA…\n#&gt; $ nonbreeding_end                &lt;date&gt; NA, 2022-02-15, NA, NA, 2022-03-29, NA…\n#&gt; $ postbreeding_migration_quality &lt;chr&gt; NA, \"3\", NA, NA, \"3\", NA, \"1\", \"3\", NA,…\n#&gt; $ postbreeding_migration_start   &lt;date&gt; NA, 2022-08-09, NA, NA, 2022-07-19, NA…\n#&gt; $ postbreeding_migration_end     &lt;date&gt; NA, 2022-11-29, NA, NA, 2022-11-08, NA…\n#&gt; $ prebreeding_migration_quality  &lt;chr&gt; NA, \"3\", NA, NA, \"3\", NA, \"2\", \"3\", NA,…\n#&gt; $ prebreeding_migration_start    &lt;date&gt; NA, 2022-02-22, NA, NA, 2022-04-05, NA…\n#&gt; $ prebreeding_migration_end      &lt;date&gt; NA, 2022-05-17, NA, NA, 2022-06-14, NA…\n#&gt; $ resident_quality               &lt;chr&gt; \"3\", NA, \"3\", \"2\", NA, \"2\", NA, NA, \"3\"…\n#&gt; $ resident_start                 &lt;date&gt; 2022-01-04, NA, 2022-01-04, 2022-01-04…\n#&gt; $ resident_end                   &lt;date&gt; 2022-12-27, NA, 2022-12-27, 2022-12-27…\n#&gt; $ has_trends                     &lt;lgl&gt; TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, FA…\n#&gt; $ trends_season                  &lt;chr&gt; \"resident\", \"breeding\", \"resident\", NA,…\n#&gt; $ trends_region                  &lt;chr&gt; \"north_america\", \"north_america\", \"nort…\n#&gt; $ trends_start_year              &lt;dbl&gt; 2012, 2012, 2011, NA, 2012, 2015, NA, 2…\n#&gt; $ trends_end_year                &lt;dbl&gt; 2022, 2022, 2021, NA, 2022, 2022, NA, 2…\n#&gt; $ trends_start_date              &lt;chr&gt; \"01-25\", \"05-24\", \"11-01\", NA, \"06-21\",…\n#&gt; $ trends_end_date                &lt;chr&gt; \"05-10\", \"08-02\", \"05-03\", NA, \"07-12\",…\n#&gt; $ rsquared                       &lt;dbl&gt; 0.923, 0.857, 0.881, NA, 0.787, 0.820, …\n#&gt; $ beta0                          &lt;dbl&gt; -0.01392, 0.68942, -0.09267, NA, -0.162…\n\nIf you’re working in RStudio, you can use View() to interactively explore this data frame. Note that several of the columns at the end of this data frame are related to trends, which we’ll cover in the next lesson.\n\n1.2.1 Expert review\nAll species go through a process of expert human review prior to being released. The ebirdst_runs data frame also contains information from this review process. Reviewers assess each of the four seasons: breeding, non-breeding, pre-breeding migration, and post-breeding migration. Resident (i.e. non-migratory) species are identified by having TRUE in the is_resident column of ebirdst_runs, and these species are assessed across the whole year rather than seasonally. ebirdst_runs contains two important pieces of information for each season: a quality rating and seasonal dates.\nThe seasonal dates define the weeks that fall within each season; the relative abundance estimates for these weeks get averaged to produce the seasonal relative abundance maps on the Status and Trends website. Breeding and non-breeding season dates are defined for each species as the weeks during those seasons when the species’ population does not move. For this reason, these seasons are also described as stationary periods. Migration periods are defined as the periods of movement between the stationary non-breeding and breeding seasons. Note that for many species these migratory periods include not only movement from the breeding grounds to the non-breeding grounds, but also post-breeding dispersal, molt migration, and other movements.\nReviewers also examine the model estimates for each season to assess the amount of extrapolation or omission present in the model, and assign an associated quality rating ranging from 0 (lowest quality) to 3 (highest quality). Extrapolation refers to cases where the model predicts occurrence where the species is known to be absent, while omission refers to the model failing to predict occurrence where a species is known to be present.\nA rating of 0 implies this season failed review and model results should not be used at all for this period. Ratings of 1-3 correspond to a gradient of more to less extrapolation and/or omission, and we often use a traffic light analogy when referring to them:\n\nRed light (1): low quality, extensive extrapolation and/or omission and noise, but at least some regions have estimates that are accurate; can be used with caution in certain regions.\nYellow light (2): medium quality, some extrapolation and/or omission; use with caution.\nGreen light (3): high quality, very little or no extrapolation and/or omission; these seasons can be safely used.\n\n\n\n\n\n\n\nExercise\n\n\n\nLook up a species of interest to you. Identify the seasonal dates and the review quality ratings.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nBlue-winged Teal is coded as a migrant with all four seasons receiving quality ratings of 3 suggesting there is very little extrapolation or omission in the estimates.\n\nebirdst_runs %&gt;% \n  filter(common_name == \"Blue-winged Teal\") %&gt;% \n  glimpse()\n#&gt; Rows: 1\n#&gt; Columns: 28\n#&gt; $ species_code                   &lt;chr&gt; \"buwtea\"\n#&gt; $ scientific_name                &lt;chr&gt; \"Spatula discors\"\n#&gt; $ common_name                    &lt;chr&gt; \"Blue-winged Teal\"\n#&gt; $ is_resident                    &lt;lgl&gt; FALSE\n#&gt; $ breeding_quality               &lt;chr&gt; \"3\"\n#&gt; $ breeding_start                 &lt;date&gt; 2022-06-14\n#&gt; $ breeding_end                   &lt;date&gt; 2022-07-12\n#&gt; $ nonbreeding_quality            &lt;chr&gt; \"3\"\n#&gt; $ nonbreeding_start              &lt;date&gt; 2022-12-27\n#&gt; $ nonbreeding_end                &lt;date&gt; 2022-01-25\n#&gt; $ postbreeding_migration_quality &lt;chr&gt; \"3\"\n#&gt; $ postbreeding_migration_start   &lt;date&gt; 2022-07-19\n#&gt; $ postbreeding_migration_end     &lt;date&gt; 2022-12-20\n#&gt; $ prebreeding_migration_quality  &lt;chr&gt; \"3\"\n#&gt; $ prebreeding_migration_start    &lt;date&gt; 2022-02-01\n#&gt; $ prebreeding_migration_end      &lt;date&gt; 2022-06-07\n#&gt; $ resident_quality               &lt;chr&gt; NA\n#&gt; $ resident_start                 &lt;date&gt; NA\n#&gt; $ resident_end                   &lt;date&gt; NA\n#&gt; $ has_trends                     &lt;lgl&gt; TRUE\n#&gt; $ trends_season                  &lt;chr&gt; \"breeding\"\n#&gt; $ trends_region                  &lt;chr&gt; \"north_america\"\n#&gt; $ trends_start_year              &lt;dbl&gt; 2012\n#&gt; $ trends_end_year                &lt;dbl&gt; 2022\n#&gt; $ trends_start_date              &lt;chr&gt; \"06-14\"\n#&gt; $ trends_end_date                &lt;chr&gt; \"07-12\"\n#&gt; $ rsquared                       &lt;dbl&gt; 0.838\n#&gt; $ beta0                          &lt;dbl&gt; 0.456"
  },
  {
    "objectID": "status.html#sec-status-download",
    "href": "status.html#sec-status-download",
    "title": "1  eBird Status Data Products",
    "section": "1.3 Downloading data",
    "text": "1.3 Downloading data\nThe function ebirdst_download_status() downloads eBird Status Data Products for a single species, it takes a species name (common name, scientific name, or species code) as its first argument. For example, to download the data for Blue-winged Teal use:\n\nebirdst_download_status(\"Blue-winged Teal\")\n\nThere are a wide variety of data products available for download via ebirdst_download_status(); however, the default behavior of this function is to only download the most commonly used data products: weekly and seasonal estimates of relative abundance. Consult the help for ebirdst_download_status() for details on downloading other data products, for example, range polygons or estimates of occurrence rate.\nebirdst uses a central location on your computer to download and store data. As a data user, the intention is for you to always access eBird Status and Trends Data Products through ebirdst rather than interacting with the data directly. You can see where the data are stored with ebirdst_data_dir() and you can change the default download directory by setting the environment variable EBIRDST_DATA_DIR, for example by calling usethis::edit_r_environ() and adding a line such as EBIRDST_DATA_DIR=/custom/download/directory/."
  },
  {
    "objectID": "status.html#sec-status-load",
    "href": "status.html#sec-status-load",
    "title": "1  eBird Status Data Products",
    "section": "1.4 Loading data in R",
    "text": "1.4 Loading data in R\nIn this workshop, we’ll focus on the raster data products, consisting of estimates on a regular grid of square cells. These can all be loaded into R using the ebirdst function load_raster(). In R, we’ll use the terra package to work with raster data. Raster data products fall into two broad categories providing weekly and seasonal estimates.\n\n1.4.1 Weekly raster estimates\nThe core raster data products are the weekly estimates of occurrence, count, relative abundance, and proportion of population. All estimates are the median expected value for a 2 km, 1 hour eBird Traveling Count by an expert eBird observer at the optimal time of day and for optimal weather conditions to observe the given species.\n\nOccurrence: the expected probability of encountering a species.\nCount: the expected count of a species, conditional on its occurrence at the given location.\nRelative abundance: the expected relative abundance of a species, computed as the product of the probability of occurrence and the count conditional on occurrence. In addition to the median relative abundance, upper and lower confidence intervals (CIs) are provided, defined at the 10th and 90th quantile of relative abundance, respectively.\nProportion of population: the proportion of the total relative abundance within each cell. This is a derived product calculated by dividing each cell value in the relative abundance raster by the sum of all cell values.\n\nAll predictions are made on a standard 3 km x 3 km global grid; however, for convenience lower resolution GeoTIFFs are also provided, which are typically much faster to work with. The three available resolutions are:\n\nHigh resolution (3km): the native 3 km resolution data\nMedium resolution (9km): data aggregated by a factor of 3 in each direction resulting in a resolution of 9 km\nLow resolution (27km): data aggregated by a factor of 9 in each direction resulting in a resolution of 27 km\n\nThe first argument to load_raster() is the species (common name, scientific name, or species code) and the remaining arguments specify which product to load. For example, we can load the relative abundance estimates with:\n\nabd_median &lt;- load_raster(\"buwtea\", product = \"abundance\")\nprint(abd_median)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 5630, 13511, 52  (nrow, ncol, nlyr)\n#&gt; resolution  : 2963, 2963  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6673060, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source      : buwtea_abundance_median_3km_2022.tif \n#&gt; names       : 2022-01-04, 2022-01-11, 2022-01-18, 2022-01-25, 2022-02-01, 2022-02-08, ... \n#&gt; min values  :          0,          0,          0,          0,          0,          0, ... \n#&gt; max values  :        691,        961,        694,       1029,        930,        876, ...\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nTake a moment to explore the output of print(abd_median) to see what information is provided about the raster. You should be able to identify the number of layers (52), the resolution (2962 meters), and coordinate reference system (a sinusoidal equal area projection).\n\n\nWe often refer to these raster objects as “weekly cubes” (e.g. the “weekly abundance cube”). Notice that the cubes contains 52 layers, corresponding to the weeks of the year. The layer names are the dates associated with the mid-point of each week.\n\nas.Date(names(abd_median))\n#&gt;  [1] \"2022-01-04\" \"2022-01-11\" \"2022-01-18\" \"2022-01-25\" \"2022-02-01\"\n#&gt;  [6] \"2022-02-08\" \"2022-02-15\" \"2022-02-22\" \"2022-03-01\" \"2022-03-08\"\n#&gt; [11] \"2022-03-15\" \"2022-03-22\" \"2022-03-29\" \"2022-04-05\" \"2022-04-12\"\n#&gt; [16] \"2022-04-19\" \"2022-04-26\" \"2022-05-03\" \"2022-05-10\" \"2022-05-17\"\n#&gt; [21] \"2022-05-24\" \"2022-05-31\" \"2022-06-07\" \"2022-06-14\" \"2022-06-21\"\n#&gt; [26] \"2022-06-28\" \"2022-07-05\" \"2022-07-12\" \"2022-07-19\" \"2022-07-26\"\n#&gt; [31] \"2022-08-02\" \"2022-08-09\" \"2022-08-16\" \"2022-08-23\" \"2022-08-30\"\n#&gt; [36] \"2022-09-06\" \"2022-09-13\" \"2022-09-20\" \"2022-09-27\" \"2022-10-04\"\n#&gt; [41] \"2022-10-11\" \"2022-10-18\" \"2022-10-25\" \"2022-11-01\" \"2022-11-08\"\n#&gt; [46] \"2022-11-15\" \"2022-11-22\" \"2022-11-29\" \"2022-12-06\" \"2022-12-13\"\n#&gt; [51] \"2022-12-20\" \"2022-12-27\"\n\nTo load the upper and lower confidence intervals for relative abundance, we can use the metric argument.\n\nabd_lower &lt;- load_raster(\"buwtea\", product = \"abundance\", metric = \"lower\")\nabd_upper &lt;- load_raster(\"buwtea\", product = \"abundance\", metric = \"upper\")\n\n\n\n\n\n\n\nExercise\n\n\n\nTry loading the weekly proportion of population cube at 27 km resolution.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nprop_pop &lt;- load_raster(\"buwtea\", \n                        product = \"proportion-population\", \n                        resolution = \"27km\")\nprint(prop_pop)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 626, 1502, 52  (nrow, ncol, nlyr)\n#&gt; resolution  : 26665, 26665  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6684911, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source      : buwtea_proportion-population_median_27km_2022.tif \n#&gt; names       : 2022-01-04, 2022-01-11, 2022-01-18, 2022-01-25, 2022-02-01, 2022-02-08, ... \n#&gt; min values  :      0.000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000, ... \n#&gt; max values  :      0.017,     0.0299,     0.0253,     0.0143,     0.0113,     0.0147, ...\n\n\n\n\n\n\n1.4.2 Seasonal raster estimates\nThe seasonal raster estimates are provided for the same set of products and at the same three resolutions as the weekly estimates. They’re derived from the weekly data by taking the cell-wise mean or max across the weeks within each season. Recall that the seasonal boundary dates are available in the data frame ebirdst_runs. Data are not provided for seasons with a quality score of 0.\nThe seasonal data products can be loaded with load_raster(period = \"seasonal\") and the metric argument set to either \"mean\" or \"max\". For example, to load the mean seasonal relative abundance, use\n\nabd_seasonal_mean &lt;- load_raster(\"buwtea\", \n                                 product = \"abundance\", \n                                 period = \"seasonal\", \n                                 metric = \"mean\")\nprint(abd_seasonal_mean)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 5630, 13511, 4  (nrow, ncol, nlyr)\n#&gt; resolution  : 2963, 2963  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6673060, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source      : buwtea_abundance_seasonal_mean_3km_2022.tif \n#&gt; names       : breeding, nonbreeding, prebree~gration, postbre~gration \n#&gt; min values  :      0.0,           0,               0,               0 \n#&gt; max values  :     23.8,         572,             165,             435\n\nNotice there are four layers in this raster corresponding to the four seasons.\n\nnames(abd_seasonal_mean)\n#&gt; [1] \"breeding\"               \"nonbreeding\"            \"prebreeding_migration\" \n#&gt; [4] \"postbreeding_migration\"\n\nFinally, as a convenience, the data products include year-round rasters summarizing the mean or max across all weeks that fall within a season that passed the expert review process. These can be accessed similarly to the seasonal products, just with period = \"full-year\" instead. For example, these layers can be used in conservation planning to assess the most important sites across the full range and full annual cycle of a species.\n\nabd_fy_max &lt;- load_raster(\"buwtea\", \n                          product = \"abundance\", \n                          period = \"full-year\", \n                          metric = \"max\")"
  },
  {
    "objectID": "status.html#sec-status-raster",
    "href": "status.html#sec-status-raster",
    "title": "1  eBird Status Data Products",
    "section": "1.5 Working with raster data",
    "text": "1.5 Working with raster data\nLet’s load the weekly and seasonal relative abundance cubes and use them to demonstrate some basic raster operations with the data. We’ll use the 9 km estimates for demonstration since they’re faster to process, but in practice you may want to use the 3 km resolution data for increased precision.\n\nabd_weekly &lt;- load_raster(\"buwtea\", product = \"abundance\", resolution = \"9km\")\nabd_seasonal &lt;- load_raster(\"buwtea\", product = \"abundance\", \n                            period = \"seasonal\", resolution = \"9km\")\n\nThese cubes can easily be subset to a single week or season.\n\n# week of may 17\nabd_weekly[[\"2022-05-17\"]]\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 1877, 4504, 1  (nrow, ncol, nlyr)\n#&gt; resolution  : 8888, 8888  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6676023, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source      : buwtea_abundance_median_9km_2022.tif \n#&gt; name        : 2022-05-17 \n#&gt; min value   :        0.0 \n#&gt; max value   :       12.7\n# breeding season\nabd_seasonal[[\"breeding\"]]\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 1877, 4504, 1  (nrow, ncol, nlyr)\n#&gt; resolution  : 8888, 8888  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6676023, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source      : buwtea_abundance_seasonal_mean_9km_2022.tif \n#&gt; name        : breeding \n#&gt; min value   :      0.0 \n#&gt; max value   :     10.6\n\nWe can also subset the weekly cube to a range of weeks. For example, let’s subset to only the estimates for weeks in May, then take the average across the weeks.\n\n# determine which dates we want to include\nweek_dates &lt;- as.Date(names(abd_weekly))\nstart_date &lt;- as.Date(\"2022-05-01\")\nend_date &lt;- as.Date(\"2022-05-31\")\nweek_in_may &lt;- week_dates &gt;= start_date & week_dates &lt;= end_date\n\n# subset to weeks in may\nabd_weekly_may &lt;- abd_weekly[[week_in_may]]\n\n# average across weeks\nmean(abd_weekly_may, na.rm = TRUE)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 1877, 4504, 1  (nrow, ncol, nlyr)\n#&gt; resolution  : 8888, 8888  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6676023, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source(s)   : memory\n#&gt; name        : mean \n#&gt; min value   :  0.0 \n#&gt; max value   : 20.5\n\nMaking a simple map of the data will produce unexpected results. For example, let’s map the non-breeding season relative abundance for Blue-winged Teal.\n\nplot(abd_seasonal[[\"nonbreeding\"]])\n\n\n\n\n\n\n\n\nAll eBird Status Data Products are provided for the entire globe in an esoteric Sinusoidal equal area projection designed for analysis but not mapping. Also, notice that some areas, such as the Amazon Basin and High Arctic, have missing values (white in the map) indicating that there was insufficient data to make a prediction in the region. Other areas, such as Central America and Western Europe, have sufficient data to predict that the species is absent (light grey on the map). To produce a more useful map, we can crop and mask the data to a region of interest. For example, let’s spatially subset the non-breeding season relative abundance raster for Blue-winged Teal data to the footprint of the Lower Mississippi Valley Joint Venture (LMVJV).\n\n# polygon for the lower mississippi valley joint venture footprint\nlmv_boundary &lt;- paste0(\"https://github.com/ebird/ebirdst-workshop_tws-2023/\",\n                       \"raw/main/data/boundaries.gpkg\") %&gt;% \n  read_sf(layer = \"lmvjv\") %&gt;% \n  st_transform(crs = st_crs(abd_seasonal))\n\n# state boundary polygons for mapping\nstates &lt;- paste0(\"https://github.com/ebird/ebirdst-workshop_tws-2023/\",\n                 \"raw/main/data/boundaries.gpkg\") %&gt;% \n  read_sf(layer = \"states\") %&gt;% \n  st_transform(crs = st_crs(abd_seasonal))\n\n# crop and mask the breeding season relative abundance raster\nabd_breeding_lmv &lt;- crop(abd_seasonal[[\"nonbreeding\"]], lmv_boundary) %&gt;% \n  mask(lmv_boundary)\n\n# map\nplot(abd_breeding_lmv, axes = FALSE)\nplot(st_geometry(states), add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nLet’s take a break before moving on to some more realistic applications of the eBird Status Data Products. Make sure you’re comfortable loading the data into R and performing some of the basic operations."
  },
  {
    "objectID": "status.html#sec-status-applications",
    "href": "status.html#sec-status-applications",
    "title": "1  eBird Status Data Products",
    "section": "1.6 Applications",
    "text": "1.6 Applications\nThe remainder of the workshop will work through two example applications using the eBird Status Data Products:\n\nTrajectories: chart the change in the percent of the population in a region throughout the year for a set of species.\nPrioritization: use eBird Status Data Products to identify important sites for a set of species.\n\n\n1.6.1 Trajectories\nIn this application, we’ll look at the change in populations for two species over the course of the year in the LMVJV. We’ll consider Blue-winged Teal and Canvasback, two migrant species that winter in the region. When comparing multiple species, or a single species between different seasons, it’s important to use the proportion of population rather than relative abundance to mitigate the impact of differences in detectability between seasons and species.\nLet’s start by downloading data for Canvasback (recall we already downloaded the Blue-winged Teal data) and loading the weekly proportion of population cubes for both species. For the remainder of this workshop, we’ll work with the 27 km resolution data to ensure we can download and process data quickly. Below we use pattern = \"_27km_\" to instruct ebirdst_download_status() to only download the 27 km estimates. In real-world applications, you will likely want to use the full 3 km resolution data for higher precision.\n\n# download data\nebirdst_download_status(\"Canvasback\", pattern = \"_27km_\")\n\n# proportion of population cubes\npop_buwtea &lt;- load_raster(\"buwtea\", \n                          product = \"proportion-population\", \n                          resolution = \"9km\")\npop_canvas &lt;- load_raster(\"canvas\", \n                          product = \"proportion-population\", \n                          resolution = \"9km\")\n\nNow, we’ll use the R package exactextractr to calculate the sum of the proportions for each species within the LMVJV.\n\n# calculate total proportion of population within lmvjv\n# blue-winged teal\ntraj_buwtea &lt;- exact_extract(pop_buwtea, lmv_boundary, fun = \"sum\")\ntraj_buwtea &lt;- data.frame(species = \"Blue-winged Teal\",\n                           week = as.Date(names(pop_buwtea)),\n                           prop_pop = as.numeric(traj_buwtea[1, ]))\n# canvasback\ntraj_canvas &lt;- exact_extract(pop_canvas, lmv_boundary, fun = \"sum\")\ntraj_canvas &lt;- data.frame(species = \"Canvasback\",\n                           week = as.Date(names(pop_canvas)),\n                           prop_pop = as.numeric(traj_canvas[1, ]))\n\n# combine\ntrajectories &lt;- bind_rows(traj_buwtea, traj_canvas)\nhead(trajectories)\n#&gt;            species       week prop_pop\n#&gt; 1 Blue-winged Teal 2022-01-04  0.00622\n#&gt; 2 Blue-winged Teal 2022-01-11  0.00885\n#&gt; 3 Blue-winged Teal 2022-01-18  0.00925\n#&gt; 4 Blue-winged Teal 2022-01-25  0.01097\n#&gt; 5 Blue-winged Teal 2022-02-01  0.01298\n#&gt; 6 Blue-winged Teal 2022-02-08  0.01600\n\nFinally we can plot the trajectories.\n\nggplot(trajectories, aes(x = week, y = prop_pop, color = species)) +\n  geom_line() +\n  scale_y_continuous(labels = scales::percent) +\n  labs(x = \"Week\", \n       y = \"% of population\",\n       title = \"Weekly % of population trajectory in LMVJV\",\n       color = NULL) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\n\n1.6.2 Prioritization\nFor the next application, we’ll perform a multi-species site prioritization exercise, identifying important non-breeding sites for a set of four species in the LMVJV: Blue-winged Teal, Canvasback, Mallard, and Virginia Rail. Let’s start by downloading data for species that require it, loading the seasonal proportion of population rasters, cropping to the LMVJV, and combining the rasters across species.\n\n\n\n\n\n\nTip\n\n\n\nRelative abundance estimates are impacted by detection rates, which can vary between species. As a results, when comparing eBird Status and Trends data across species, it’s critical to always use the percent of population layers, which have been standardized by dividing each cell value by the total relative abundance across all cells.\n\n\n\nspecies_list &lt;- c(\"buwtea\", \"canvas\", \"mallard\", \"virrai\")\nproportion_population &lt;- list()\nfor (species in species_list) {\n  # download data where needed, existing files won't be re-downloaded\n  ebirdst_download_status(species, pattern = \"_27km_\")\n  \n  # load seasonal proportion of population\n  pop_seasonal &lt;- load_raster(species, \"proportion-population\", \n                              period = \"seasonal\", \n                              resolution = \"27km\")\n    \n  # subset to the nonbreeding season, crop and mask to lmvjv\n  pop_breeding &lt;- pop_seasonal[[\"nonbreeding\"]] %&gt;% \n    crop(lmv_boundary) %&gt;% \n    mask(lmv_boundary)\n  \n  # combine with other species\n  proportion_population[[species]] &lt;- pop_breeding\n}\n# stack the rasters into a single object\nproportion_population &lt;- rast(proportion_population)\nprint(proportion_population)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 32, 49, 4  (nrow, ncol, nlyr)\n#&gt; resolution  : 26665, 26665  (x, y)\n#&gt; extent      : -9215679, -7909081, 3287904, 4141193  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source(s)   : memory\n#&gt; varnames    : buwtea_proportion-population_seasonal_mean_27km_2022 \n#&gt;               canvas_proportion-population_seasonal_mean_27km_2022 \n#&gt;               mallar3_proportion-population_seasonal_mean_27km_2022 \n#&gt;               ...\n#&gt; names       :   buwtea,  canvas,  mallard,  virrai \n#&gt; min values  : 0.000000, 0.00000, 0.000000, 0.00000 \n#&gt; max values  : 0.000834, 0.00276, 0.000502, 0.00491\n\nThe goal of this exercise is to simultaneously prioritize sites across all four species. To do this, we calculate the cell-wise mean proportion of population across the species, which results in a single layer that acts as a proxy for importance.\n\n# importance: mean percent of population across species\nimportance &lt;- mean(proportion_population, na.rm = TRUE)\n\n# plot the square root of importance since the data are right skewed\npar(mar = c(0.25, 0.25, 0.25, 0.25))\nplot(sqrt(importance), axes = FALSE)\nplot(st_geometry(states), add = TRUE)\n\n\n\n\n\n\n\n\nThe absolute numbers in this map are challenging to interpret (they’re the mean proportion of the population across the four species in each cell). Instead, the values should be interpreted in relative terms, giving the relative importance of each cell for this set of four species.\nFor the sake of this example, let’s identify the top 10% of grid cells within the LMVJV for these four species.\n\n# identify the 90th quantile of importance\nq90 &lt;- global(importance, fun = quantile, probs = 0.9, na.rm = TRUE) %&gt;% \n  as.numeric()\n\n# reclassify the importance raster to highlight the top cells\ntop_cells &lt;- as.numeric(importance &gt;= q90)\n\nFinally, let’s make a basic map showing the selected sites in green.\n\npar(mar = c(0.25, 0.25, 0.25, 0.25))\nplot(top_cells, axes = FALSE, legend = FALSE)\nplot(st_geometry(states), add = TRUE)"
  },
  {
    "objectID": "trends.html#sec-trends-species",
    "href": "trends.html#sec-trends-species",
    "title": "2  eBird Trends Data Products",
    "section": "2.1 eBird Trends species",
    "text": "2.1 eBird Trends species\nThe 2022 release of the eBird Trends Data Products includes data for 853 species. The data frame ebirdst_runs that we examined in the previous lesson indicates which species have trends estimates with the has_trends column. We can filter the data frame and only select those columns relevant to trends.\n\ntrends_runs &lt;- ebirdst_runs %&gt;% \n  filter(has_trends) %&gt;% \n  select(species_code, common_name,\n         trends_season, trends_region,\n         trends_start_year, trends_end_year,\n         trends_start_date, trends_end_date,\n         rsquared, beta0)\nglimpse(trends_runs)\n#&gt; Rows: 853\n#&gt; Columns: 10\n#&gt; $ species_code      &lt;chr&gt; \"abetow\", \"acafly\", \"acowoo\", \"aldfly\", \"alepar2\", \"…\n#&gt; $ common_name       &lt;chr&gt; \"Abert's Towhee\", \"Acadian Flycatcher\", \"Acorn Woodp…\n#&gt; $ trends_season     &lt;chr&gt; \"resident\", \"breeding\", \"resident\", \"breeding\", \"res…\n#&gt; $ trends_region     &lt;chr&gt; \"north_america\", \"north_america\", \"north_america\", \"…\n#&gt; $ trends_start_year &lt;dbl&gt; 2012, 2012, 2011, 2012, 2015, 2012, 2011, 2011, 2012…\n#&gt; $ trends_end_year   &lt;dbl&gt; 2022, 2022, 2021, 2022, 2022, 2022, 2021, 2021, 2022…\n#&gt; $ trends_start_date &lt;chr&gt; \"01-25\", \"05-24\", \"11-01\", \"06-21\", \"07-26\", \"03-22\"…\n#&gt; $ trends_end_date   &lt;chr&gt; \"05-10\", \"08-02\", \"05-03\", \"07-12\", \"12-06\", \"06-07\"…\n#&gt; $ rsquared          &lt;dbl&gt; 0.923, 0.857, 0.881, 0.787, 0.820, 0.909, 0.852, 0.7…\n#&gt; $ beta0             &lt;dbl&gt; -0.01392, 0.68942, -0.09267, -0.16241, 0.31904, -0.1…\n\nInformation is provided on the trends model for each species, including two predictive performance metrics (rsquared and beta0) that are based on a comparison of actual and estimated trends for a suite of simulations (see Fink et al. 2023 for further details). The columns in the trends_runs data frame are as follows:\n\nspecies_code: the alphanumeric eBird species code uniquely identifying the species.\ncommon_name: the English common name of the species.\ntrends_season: season that the trend was estimated for: breeding, nonbreeding, or resident.\ntrends_region: the geographic region that the trend model was run for. Note that broadly distributed species (e.g. Barn Swallow) will only have trend estimates for a regional subset of their full range.\ntrends_start_year/trends_end_year: the start and end years of the trend time period.\ntrends_start_date/trends_end_date: the start and end dates (MM-DD format) of the season for which the trend was estimated.\nrsquared: R-squared value comparing the actual and estimated trends from the simulations.\nbeta0: the slope of a linear model fitting actual vs. estimated trends (actual ~ estimated) for the simulations. Positive values of beta0 indicate that the models are systematically underestimating the simulated trend for this species.\n\nNote that some season dates span two calendar years, for example Canvasback has 2011-2021 trends estimates for a non-breeding season defined as December 20 to February 8. In this case, the first season will be December 20, 2011 to February 8, 2012.\n\ntrends_runs %&gt;% \n  filter(common_name == \"Canvasback\") %&gt;% \n  select(common_name, trends_season,\n         trends_start_year, trends_end_year, \n         trends_start_date, trends_end_date)\n#&gt; # A tibble: 1 × 6\n#&gt;   common_name trends_season trends_start_year trends_end_year trends_start_date\n#&gt;   &lt;chr&gt;       &lt;chr&gt;                     &lt;dbl&gt;           &lt;dbl&gt; &lt;chr&gt;            \n#&gt; 1 Canvasback  nonbreeding                2011            2021 12-20            \n#&gt; # ℹ 1 more variable: trends_end_date &lt;chr&gt;"
  },
  {
    "objectID": "trends.html#sec-trends-download",
    "href": "trends.html#sec-trends-download",
    "title": "2  eBird Trends Data Products",
    "section": "2.2 Downloading data",
    "text": "2.2 Downloading data\nTrends data access is granted through the same process as the eBird Status Data Products. If you haven’t already requested an API key, consult the relevant section in the previous lesson.\nTrends data can be downloaded for one or more species using ebirdst_download_trends(), where the first argument is a vector of common names, scientific names, or species codes. As with the Status Data Products, trends data will be downloaded to a centralized directory which can be viewed with ebirdst_data_dir(). For example, let’s download the breeding season trends data for Sage Thrasher.\n\nebirdst_download_trends(\"Sage Thrasher\")"
  },
  {
    "objectID": "trends.html#sec-trends-load",
    "href": "trends.html#sec-trends-load",
    "title": "2  eBird Trends Data Products",
    "section": "2.3 Loading data into R",
    "text": "2.3 Loading data into R\nOnce the data are downloaded, the trends data for a set of species, can be loaded into R using the function load_trends(). For example, we can load the Sage Thrasher trends estimates we just downloaded with:\n\ntrends_sagthr &lt;- load_trends(\"Sage Thrasher\")\n\nEach row corresponds to the trend estimate for a 27 km by 27 km grid cell, identified by the srd_id column and with cell center given by the longitude and latitude coordinates. Columns beginning with abd_ppy provide estimates of the percent per year trend in relative abundance and 80% confidence intervals, while those beginning with abd_trend provide estimates of the cumulative trend in relative abundance and 80% confidence intervals over the time period. The abd column gives the relative abundance estimate for the middle of the trend time period (e.g. 2014 for a 2007-2021 trend). The start_year/end_year and start_date/end_date columns provide redundant information to that available in ebirdst_runs. Specifically for Sage Thrasher we have:\n\ntrends_runs %&gt;% \n  filter(common_name == \"Sage Thrasher\") %&gt;% \n  select(common_name, trends_season,\n         trends_start_year, trends_end_year,\n         trends_start_date, trends_end_date)\n#&gt; # A tibble: 1 × 6\n#&gt;   common_name  trends_season trends_start_year trends_end_year trends_start_date\n#&gt;   &lt;chr&gt;        &lt;chr&gt;                     &lt;dbl&gt;           &lt;dbl&gt; &lt;chr&gt;            \n#&gt; 1 Sage Thrash… breeding                   2012            2022 05-17            \n#&gt; # ℹ 1 more variable: trends_end_date &lt;chr&gt;\n\nThis tells us that the trend estimates are for the breeding season (May 17 to July 12) for the period 2012-2022.\n\n\n\n\n\n\nExercise\n\n\n\nLook up a species of interest to you. Confirm the species has trends estimates, download the trends data, and load them into R. Take a moment to explore the data frame and ensure you understand all the columns."
  },
  {
    "objectID": "trends.html#sec-trends-spatial",
    "href": "trends.html#sec-trends-spatial",
    "title": "2  eBird Trends Data Products",
    "section": "2.4 Conversion to spatial formats",
    "text": "2.4 Conversion to spatial formats\nThe eBird trends data are stored in a tabular format, where each row gives the trend estimate for a single cell in a 27 km x 27 km equal area grid. For each grid cell, the coordinates (longitude and latitude) are provided for the center of the grid cell. For many applications, an explicitly spatial format is more useful and these coordinates can be use to convert from the tabular format to either a vector or raster format.\n\n2.4.1 Vector (points)\nThe tabular trend data can be converted into point vector features for use with the sf package using the sf function st_as_sf().\n\ntrends_sf &lt;- st_as_sf(trends_sagthr, \n                      coords = c(\"longitude\", \"latitude\"), \n                      crs = 4326)\nprint(trends_sf)\n#&gt; Simple feature collection with 2462 features and 15 fields\n#&gt; Geometry type: POINT\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -122 ymin: 33.5 xmax: -103 ymax: 49.4\n#&gt; Geodetic CRS:  WGS 84\n#&gt; # A tibble: 2,462 × 16\n#&gt;   species_code season   start_year end_year start_date end_date srd_id      abd\n#&gt; * &lt;chr&gt;        &lt;chr&gt;         &lt;int&gt;    &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;int&gt;    &lt;dbl&gt;\n#&gt; 1 sagthr       breeding       2012     2022 05-17      07-12    254264 0.000527\n#&gt; 2 sagthr       breeding       2012     2022 05-17      07-12    255764 0.0147  \n#&gt; 3 sagthr       breeding       2012     2022 05-17      07-12    255765 0.000214\n#&gt; 4 sagthr       breeding       2012     2022 05-17      07-12    257264 0.00174 \n#&gt; 5 sagthr       breeding       2012     2022 05-17      07-12    257265 0.0132  \n#&gt; 6 sagthr       breeding       2012     2022 05-17      07-12    257266 0.00118 \n#&gt; # ℹ 2,456 more rows\n#&gt; # ℹ 8 more variables: abd_ppy &lt;dbl&gt;, abd_ppy_lower &lt;dbl&gt;, abd_ppy_upper &lt;dbl&gt;,\n#&gt; #   abd_ppy_nonzero &lt;lgl&gt;, abd_trend &lt;dbl&gt;, abd_trend_lower &lt;dbl&gt;,\n#&gt; #   abd_trend_upper &lt;dbl&gt;, geometry &lt;POINT [°]&gt;\n\n\n\n2.4.2 Raster\nThe tabular trend estimates can most easily be converted to raster format for use with the terra package using the function rasterize_trends(). Any of the columns in the trends data frame can be selected using the layers argument and converted into layers in the resulting raster object.\n\n# rasterize the percent per year trend with confidence limits (default)\nppy_raster &lt;- rasterize_trends(trends_sagthr)\nprint(ppy_raster)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 67, 100, 3  (nrow, ncol, nlyr)\n#&gt; resolution  : 26665, 26665  (x, y)\n#&gt; extent      : -10602273, -7935747, 3714548, 5501122  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source(s)   : memory\n#&gt; names       : abd_ppy, abd_ppy_lower, abd_ppy_upper \n#&gt; min values  :   -14.6,         -17.5,         -11.5 \n#&gt; max values  :    13.6,          11.7,          15.8\n\n# rasterize the cumulative trend estimate\ntrends_raster &lt;- rasterize_trends(trends_sagthr, layers = \"abd_trend\")\nprint(trends_sagthr)\n#&gt; # A tibble: 2,462 × 17\n#&gt;   species_code season   start_year end_year start_date end_date srd_id longitude\n#&gt;   &lt;chr&gt;        &lt;chr&gt;         &lt;int&gt;    &lt;int&gt; &lt;chr&gt;      &lt;chr&gt;     &lt;int&gt;     &lt;dbl&gt;\n#&gt; 1 sagthr       breeding       2012     2022 05-17      07-12    254264     -120.\n#&gt; 2 sagthr       breeding       2012     2022 05-17      07-12    255764     -120.\n#&gt; 3 sagthr       breeding       2012     2022 05-17      07-12    255765     -119.\n#&gt; 4 sagthr       breeding       2012     2022 05-17      07-12    257264     -120.\n#&gt; 5 sagthr       breeding       2012     2022 05-17      07-12    257265     -120.\n#&gt; 6 sagthr       breeding       2012     2022 05-17      07-12    257266     -119.\n#&gt; # ℹ 2,456 more rows\n#&gt; # ℹ 9 more variables: latitude &lt;dbl&gt;, abd &lt;dbl&gt;, abd_ppy &lt;dbl&gt;,\n#&gt; #   abd_ppy_lower &lt;dbl&gt;, abd_ppy_upper &lt;dbl&gt;, abd_ppy_nonzero &lt;lgl&gt;,\n#&gt; #   abd_trend &lt;dbl&gt;, abd_trend_lower &lt;dbl&gt;, abd_trend_upper &lt;dbl&gt;\n\nA simple map of these data can be produced from the raster data. For example, we’ll make a map of percent per year change in relative abundance for Sage Thrasher.\n\n# define breaks and palettes similar to those on s&t website\nbreaks &lt;- seq(0, 4, by = 1)\nbreaks[1] &lt;- 0.001\nbreaks[length(breaks)] &lt;- Inf\nbreaks &lt;- c(-rev(breaks), breaks)\npal &lt;- ebirdst_palettes(length(breaks) - 1, type = \"trends\")\n\n# make a simple map\nplot(ppy_raster[[\"abd_ppy\"]], \n     col = pal, breaks =  breaks,\n     main = \"Trend in relative abundance 2012-2022 [% change per year]\",\n     cex.main = 0.75,\n     axes = FALSE, legend = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe above maps shows the percent per year trend, which is different from the trends maps on the Status and Trends website. These are two different representation of the same data and we can convert between the two using the exponential growth formula. For example, a 1% annual decline equates to a -9.6% cumulative decline from 2012-2022.\n\ntrend_ppy &lt;- -1\n(trend_cumulative &lt;- 100 * ((1 + trend_ppy / 100)^(2022 - 2012) - 1))\n#&gt; [1] -9.56"
  },
  {
    "objectID": "trends.html#sec-trends-uncertainty",
    "href": "trends.html#sec-trends-uncertainty",
    "title": "2  eBird Trends Data Products",
    "section": "2.5 Uncertainty",
    "text": "2.5 Uncertainty\nThe model used to estimate trends produces an ensemble of 100 estimates at each location, each based on a random subsample of eBird data. This ensemble of estimates is used to quantify uncertainty in the trends estimates. The estimated trend is the median across the ensemble, and the 80% confidence intervals are the lower 10th and upper 90th percentiles across the ensemble. Those wishing to access estimates from the individual folds making up the ensemble can use fold_estimates = TRUE when loading data. These fold-level estimates can be used to quantify uncertainty, for example, when calculating the trend for a given region. For example, let’s load the fold-level estimates for Sage Thrasher:\n\ntrends_sagthr_folds &lt;- load_trends(\"sagthr\", fold_estimates = TRUE)\nprint(trends_sagthr_folds)\n#&gt; # A tibble: 246,200 × 8\n#&gt;   species_code season    fold srd_id latitude longitude      abd abd_ppy\n#&gt;   &lt;chr&gt;        &lt;chr&gt;    &lt;dbl&gt;  &lt;int&gt;    &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n#&gt; 1 sagthr       breeding     1 254264     49.4     -120. 0.000527   -3.11\n#&gt; 2 sagthr       breeding     1 255764     49.1     -120. 0.0147     -2.97\n#&gt; 3 sagthr       breeding     1 255765     49.1     -119. 0.000214   -2.25\n#&gt; 4 sagthr       breeding     1 257264     48.9     -120. 0.00174    -4.53\n#&gt; 5 sagthr       breeding     1 257265     48.9     -120. 0.0132     -3.86\n#&gt; 6 sagthr       breeding     1 257266     48.9     -119. 0.00118    -4.04\n#&gt; # ℹ 246,194 more rows\n\nThis data frame is much more concise, only giving estimates of the mid-point relative abundance and percent per year trend in relative abundance for each of 100 folds for each grid cell."
  },
  {
    "objectID": "trends.html#sec-trends-applications",
    "href": "trends.html#sec-trends-applications",
    "title": "2  eBird Trends Data Products",
    "section": "2.6 Applications",
    "text": "2.6 Applications\n\n2.6.1 Regional trends\neBird trend estimates are made on a 27 km by 27 km grid, which allows summarization over broader regions such as states or provinces. Since the relative abundance of a species varies throughout its range, we need to weight the mean trend calculation by relative abundance (abd in the trends data frame). To quantify uncertainty in the regional trend, we can use the fold-level data to produce 100 distinct estimates of the regional trend, then calculate the median and 80% confidence intervals. As an example, let’s calculate the state-level mean percent per year trends in relative abundance for Sage Thrasher.\n\n# boundaries of states in the united states\nstates &lt;- paste0(\"https://github.com/ebird/ebirdst-workshop_tws-2023/\",\n                 \"raw/main/data/boundaries.gpkg\") %&gt;% \n  read_sf(layer = \"states\")\n\n# convert fold-level trends estimates to sf format\ntrends_sagthr_sf &lt;-  st_as_sf(trends_sagthr_folds, \n                              coords = c(\"longitude\", \"latitude\"), \n                              crs = 4326)\n\n# attach state to the fold-level trends data\ntrends_sagthr_sf &lt;- st_join(trends_sagthr_sf, states, left = FALSE)\n\n# abundance-weighted average trend by region and fold\ntrends_states_folds &lt;- trends_sagthr_sf %&gt;%\n  st_drop_geometry() %&gt;%\n  group_by(state, fold) %&gt;%\n  summarize(abd_ppy = sum(abd * abd_ppy) / sum(abd),\n            .groups = \"drop\")\n\n# summarize across folds for each state\ntrends_states_folds %&gt;% \n  group_by(state) %&gt;%\n  summarise(abd_ppy_median = median(abd_ppy, na.rm = TRUE),\n            abd_ppy_lower = quantile(abd_ppy, 0.10, na.rm = TRUE),\n            abd_ppy_upper = quantile(abd_ppy, 0.90, na.rm = TRUE),\n            .groups = \"drop\") %&gt;% \n  arrange(abd_ppy_median)\n#&gt; # A tibble: 13 × 4\n#&gt;   state abd_ppy_median abd_ppy_lower abd_ppy_upper\n#&gt;   &lt;chr&gt;          &lt;dbl&gt;         &lt;dbl&gt;         &lt;dbl&gt;\n#&gt; 1 US-SD          -5.42         -8.36         -4.33\n#&gt; 2 US-MT          -3.90         -5.33         -3.11\n#&gt; 3 US-WA          -3.70         -4.48         -2.83\n#&gt; 4 US-ID          -3.51         -4.19         -2.55\n#&gt; 5 US-AZ          -3.44         -3.94         -2.25\n#&gt; 6 US-WY          -3.42         -3.83         -2.51\n#&gt; # ℹ 7 more rows\n\nBased on these data, Sage Thrasher populations appear to be in decline throughout their entire range; however, some states (e.g. South Dakota) are experiencing much steeper declines than others (e.g. California).\n\n\n2.6.2 Multi-species trends\nIn some cases, we may be interested in the trend for an entire community of birds, which can be estimated by calculating the cell-wise mean trend across a suite of species. For example, the eBird Trends Data Products contain trend estimates for three species that breed in sagebrush: Brewer’s Sparrow, Sagebrush Sparrow, and Sage Thrasher. We can calculate an average trend for this group of species, which will provide an estimate of the trend in the sagebrush bird community. First let’s look at the model information to ensure all species are modeled for the same region, season, and range of years.\n\nsagebrush_species &lt;- c(\"Brewer's Sparrow\", \"Sagebrush Sparrow\", \"Sage Thrasher\")\ntrends_runs %&gt;% \n  filter(common_name %in% sagebrush_species)\n#&gt; # A tibble: 3 × 10\n#&gt;   species_code common_name       trends_season trends_region trends_start_year\n#&gt;   &lt;chr&gt;        &lt;chr&gt;             &lt;chr&gt;         &lt;chr&gt;                     &lt;dbl&gt;\n#&gt; 1 brespa       Brewer's Sparrow  breeding      north_america              2012\n#&gt; 2 sagspa1      Sagebrush Sparrow breeding      north_america              2012\n#&gt; 3 sagthr       Sage Thrasher     breeding      north_america              2012\n#&gt; # ℹ 5 more variables: trends_end_year &lt;dbl&gt;, trends_start_date &lt;chr&gt;,\n#&gt; #   trends_end_date &lt;chr&gt;, rsquared &lt;dbl&gt;, beta0 &lt;dbl&gt;\n\nEverything looks good, so we can proceed to compare trends for these species. Next we need to download the trends data for these species. Note that since we’ve already downloaded the Sage Thrasher data above it won’t be re-downloaded here.\n\nebirdst_download_trends(sagebrush_species)\n\nFinally, we can load the trends and calculate the cell-wise mean.\n\ntrends_sagebrush_species &lt;- load_trends(sagebrush_species)\n\n# calculate mean trend for each cell\ntrends_sagebrush &lt;- trends_sagebrush_species %&gt;% \n  group_by(srd_id, latitude, longitude) %&gt;% \n  summarize(n_species = n(),\n            abd_ppy = mean(abd_ppy, na.rm = TRUE),\n            .groups = \"drop\")\nprint(trends_sagebrush)\n#&gt; # A tibble: 3,265 × 5\n#&gt;   srd_id latitude longitude n_species abd_ppy\n#&gt;    &lt;int&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;int&gt;   &lt;dbl&gt;\n#&gt; 1 234764     52.5     -118.         1  -8.61 \n#&gt; 2 234765     52.5     -117.         1  -7.91 \n#&gt; 3 234766     52.5     -117.         1  -6.30 \n#&gt; 4 236265     52.2     -118.         1  -0.521\n#&gt; 5 236266     52.2     -117.         1  -6.90 \n#&gt; 6 236267     52.2     -117.         1  -6.56 \n#&gt; # ℹ 3,259 more rows"
  }
]