[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "eBird Status and Trends",
    "section": "",
    "text": "Introduction\nThis website contains the notes for a workshop on the eBird Status and Trends Data Products presented at the The Wildlife Society (TWS) Conference in November 2023. The workshop will be divided into two sections:\nIn each section, we cover how to download the data, load it into R, and use it for some common conservation and management applications."
  },
  {
    "objectID": "index.html#sec-intro-setup",
    "href": "index.html#sec-intro-setup",
    "title": "eBird Status and Trends",
    "section": "Setup",
    "text": "Setup\nThis workshop is intended to be interactive. All examples are written in the R programming language, and the instructor will work through the examples in real time, while the attendees are encouraged following along by writing the same code. To ensure we can avoid any unnecessary delays, please follow these setup instructions prior to the workshop:\n\nCreate an eBird account if you don’t already have one and request access to the eBird Status and Trends Data Products by filling out the access request form at: https://science.ebird.org/en/status-and-trends/download-data\nDownload and install the latest version of R. You must have R version 4.0.0 or newer to follow along with this workshop\nDownload and install the latest version of RStudio. RStudio is not required for this workshop; however, the instructors will be using it and you may find it easier to following along if you’re working in the same environment.\nWorking with the eBird Status and Trends Data Products in R requires the ebirdst R package. Install the latest version from GitHub by running the following code:\n\n\nif (!requireNamespace(\"remotes\", quietly = TRUE)) {\n  install.packages(\"remotes\")\n}\nremotes::install_github(\"ebird/ebirdst\", ref = \"trends\")\n\n\nEnsure all packages are updated to their most recent versions by clicking on the Update button on the Packages tab in RStudio."
  },
  {
    "objectID": "index.html#sec-intro-tidyverse",
    "href": "index.html#sec-intro-tidyverse",
    "title": "eBird Status and Trends",
    "section": "Tidyverse",
    "text": "Tidyverse\nThroughout this workshop, we use packages from the Tidyverse, an opinionated collection of R packages designed for data science. Packages such as ggplot2, for data visualization, and dplyr, for data manipulation, are two of the most well known Tidyverse packages; however, there are many more. We’ll try to explain any functions as they come up; however, for a good general resource on working with data in R using the Tidyverse see the free online book R for Data Science by Hadley Wickham.\nThe one piece of the Tidyverse that we will cover up front is the pipe operator %&gt;%. The pipe takes the expression to the left of it and “pipes” it into the first argument of the expression on the right.\n\nlibrary(dplyr)\n\n# without pipe\nmean(1:10)\n#&gt; [1] 5.5\n\n# with pipe\n1:10 %&gt;% mean()\n#&gt; [1] 5.5\n\nThe pipe can code significantly more readable by avoiding nested function calls, reducing the need for intermediate variables, and making sequential operations read left-to-right. For example, to add a new variable to a data frame, then summarize using a grouping variable, the following are equivalent:\n\n# intermediate variables\nmtcars_kg &lt;- mutate(mtcars, wt_kg = 454 * wt)\nmtcars_grouped &lt;- group_by(mtcars_kg, cyl)\nsummarize(mtcars_grouped, wt_kg = mean(wt_kg))\n#&gt; # A tibble: 3 × 2\n#&gt;     cyl wt_kg\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1     4 1038.\n#&gt; 2     6 1415.\n#&gt; 3     8 1816.\n\n# nested function calls\nsummarize(\n  group_by(\n    mutate(mtcars, wt_kg = 454 * wt),\n    cyl\n  ),\n  wt_kg = mean(wt_kg)\n)\n#&gt; # A tibble: 3 × 2\n#&gt;     cyl wt_kg\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1     4 1038.\n#&gt; 2     6 1415.\n#&gt; 3     8 1816.\n\n# pipes\nmtcars %&gt;% \n  mutate(wt_kg = 454 * wt) %&gt;% \n  group_by(cyl) %&gt;% \n  summarize(wt_kg = mean(wt_kg))\n#&gt; # A tibble: 3 × 2\n#&gt;     cyl wt_kg\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1     4 1038.\n#&gt; 2     6 1415.\n#&gt; 3     8 1816.\n\n\n\n\n\n\n\nExercise\n\n\n\nRewrite the following code using pipes:\n\nset.seed(1)\nround(log(runif(10, min = 0.5)), 1)\n#&gt;  [1] -0.5 -0.4 -0.2  0.0 -0.5 -0.1  0.0 -0.2 -0.2 -0.6\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nset.seed(1)\nrunif(10, min = 0.5) %&gt;% \n  log() %&gt;% \n  round(digits = 1)\n#&gt;  [1] -0.5 -0.4 -0.2  0.0 -0.5 -0.1  0.0 -0.2 -0.2 -0.6"
  },
  {
    "objectID": "index.html#sec-intro-spatial",
    "href": "index.html#sec-intro-spatial",
    "title": "eBird Status and Trends",
    "section": "Working with spatial data in R",
    "text": "Working with spatial data in R\nThe Status and Trends Data Products are mostly spatial data in one of the following formats:\n\nRaster: values assigned to a regular grid of square cells. Data products of this type are stored in GeoTIFF format and we use the R package terra to work with them. vector\nPolygons: polygon boundaries with attribute data assigned to each polygon. Data products of this type (e.g. range polgyons) are stored in GeoPackage format and we use the R package sf to work with them.\nPoints: point locations defined by a pair of coordinates with attribute data assigned to each point. Data products of this type are stored in CSV or Parquet format and we work with these data in R as data frames or in an excplicitly spatial format using the sf package.\n\nSome familiarity of the main spatial R packages sf and terra will be useful for following along with this workshop. The free online book Geocomputation with R is a good resource on working with spatial data in R."
  },
  {
    "objectID": "status.html#sec-status-access",
    "href": "status.html#sec-status-access",
    "title": "1  eBird Status Data Products",
    "section": "1.1 Data access",
    "text": "1.1 Data access\nAccess to the eBird Status Data Products is granted through an Access Request Form at: https://ebird.org/st/request. The terms of use have been desiged to be quite permissive in many cases, particularly academic and research use. After reading the eBird Status and Trends Data Products Terms of Use and filling out the Access Request Form you will be provided with an alphanumeric access key. To store the access key so it can be accessed by R and the ebirdst package, run the following (replacing \"XXXXXXXXX\" with your actual key):\n\nset_ebirdst_access_key(\"XXXXXXXXX\")\n\nThis will save the access key as the environment variable EBIRDST_KEY in your .Renviron file so it’s accessible within your R session. You only need to do this once to store the key.\n\n\n\n\n\n\nCheckpoint\n\n\n\nTo ensure your data access key is working, attempt run the following code, which will two small files. Speak to the instructor if this doesn’t work.\n\nebirdst_download_status(\"buwtea\", \n                        pattern = \"abundance_median_27km_2022\", \n                        force = TRUE)"
  },
  {
    "objectID": "status.html#sec-status-species",
    "href": "status.html#sec-status-species",
    "title": "1  eBird Status Data Products",
    "section": "1.2 Status and Trends species",
    "text": "1.2 Status and Trends species\nThe ebirdst_runs object is a data frame listing all the available species:\n\nglimpse(ebirdst_runs)\n#&gt; Rows: 1,113\n#&gt; Columns: 28\n#&gt; $ species_code                   &lt;chr&gt; \"abetow\", \"acafly\", \"acowoo\", \"affeag1\"…\n#&gt; $ scientific_name                &lt;chr&gt; \"Melozone aberti\", \"Empidonax virescens…\n#&gt; $ common_name                    &lt;chr&gt; \"Abert's Towhee\", \"Acadian Flycatcher\",…\n#&gt; $ is_resident                    &lt;lgl&gt; TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, F…\n#&gt; $ breeding_quality               &lt;chr&gt; NA, \"3\", NA, NA, \"3\", NA, \"1\", \"3\", NA,…\n#&gt; $ breeding_start                 &lt;date&gt; NA, 2022-05-24, NA, NA, 2022-06-21, NA…\n#&gt; $ breeding_end                   &lt;date&gt; NA, 2022-08-02, NA, NA, 2022-07-12, NA…\n#&gt; $ nonbreeding_quality            &lt;chr&gt; NA, \"3\", NA, NA, \"1\", NA, \"1\", \"3\", NA,…\n#&gt; $ nonbreeding_start              &lt;date&gt; NA, 2022-12-06, NA, NA, 2022-11-15, NA…\n#&gt; $ nonbreeding_end                &lt;date&gt; NA, 2022-02-15, NA, NA, 2022-03-29, NA…\n#&gt; $ postbreeding_migration_quality &lt;chr&gt; NA, \"3\", NA, NA, \"3\", NA, \"1\", \"3\", NA,…\n#&gt; $ postbreeding_migration_start   &lt;date&gt; NA, 2022-08-09, NA, NA, 2022-07-19, NA…\n#&gt; $ postbreeding_migration_end     &lt;date&gt; NA, 2022-11-29, NA, NA, 2022-11-08, NA…\n#&gt; $ prebreeding_migration_quality  &lt;chr&gt; NA, \"3\", NA, NA, \"3\", NA, \"2\", \"3\", NA,…\n#&gt; $ prebreeding_migration_start    &lt;date&gt; NA, 2022-02-22, NA, NA, 2022-04-05, NA…\n#&gt; $ prebreeding_migration_end      &lt;date&gt; NA, 2022-05-17, NA, NA, 2022-06-14, NA…\n#&gt; $ resident_quality               &lt;chr&gt; \"3\", NA, \"3\", \"2\", NA, \"2\", NA, NA, \"3\"…\n#&gt; $ resident_start                 &lt;date&gt; 2022-01-04, NA, 2022-01-04, 2022-01-04…\n#&gt; $ resident_end                   &lt;date&gt; 2022-12-27, NA, 2022-12-27, 2022-12-27…\n#&gt; $ has_trends                     &lt;lgl&gt; TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, FA…\n#&gt; $ trends_season                  &lt;chr&gt; \"resident\", \"breeding\", \"resident\", NA,…\n#&gt; $ trends_region                  &lt;chr&gt; \"north_america\", \"north_america\", \"nort…\n#&gt; $ trends_start_year              &lt;dbl&gt; 2012, 2012, 2011, NA, 2012, 2015, NA, 2…\n#&gt; $ trends_end_year                &lt;dbl&gt; 2022, 2022, 2021, NA, 2022, 2022, NA, 2…\n#&gt; $ trends_start_date              &lt;chr&gt; \"01-25\", \"05-24\", \"11-01\", NA, \"06-21\",…\n#&gt; $ trends_end_date                &lt;chr&gt; \"05-10\", \"08-02\", \"05-03\", NA, \"07-12\",…\n#&gt; $ rsquared                       &lt;dbl&gt; 0.923, 0.857, 0.881, NA, 0.787, 0.820, …\n#&gt; $ beta0                          &lt;dbl&gt; -0.01392, 0.68942, -0.09267, NA, -0.162…\n\nIf you’re working in RStudio, you can use View() to interactively explore this data frame. Note that several of the columns at the end of this data frame are related to trends, which we’ll cover in the next section.\n\n1.2.1 Expert review\nAll species go through a process of expert human review prior to being released. The ebirdst_runs data frame also contains information from this review process. Reviewers assess each of the four seasons: breeding, non-breeding, pre-breeding migration, and post-breeding migration. Resident (i.e., non-migratory) species are identified by having TRUE in the resident column of ebirdst_runs, and these species are assessed across the whole year rather than seasonally. ebirdst_runs contains two important pieces of information for each season: a quality rating and seasonal dates.\nThe seasonal dates define the weeks that fall within each season; the relative abundance estimates for these weeks get averaged to produce the seasonal relative abundance maps on the Status and Trends website. Breeding and non-breeding season dates are defined for each species as the weeks during those seasons when the species’ population does not move. For this reason, these seasons are also described as stationary periods. Migration periods are defined as the periods of movement between the stationary non-breeding and breeding seasons. Note that for many species these migratory periods include not only movement from breeding grounds to non-breeding grounds, but also post-breeding dispersal, molt migration, and other movements.\nReviewers also examine the model estimates for each season to assess the amount of extrapolation or omission present in the model, and assign an associated quality rating ranging from 0 (lowest quality) to 3 (highest quality). Extrapolation refers to cases where the model predicts occurrence where the species is known to be absent, while omission refers to the model failing to predict occurrence where a species is known to be present.\nA rating of 0 implies this season failed review and model results should not be used at all for this period. Ratings of 1-3 correspond to a gradient of more to less extrapolation and/or omission, and we often use a traffic light analogy when referring to them:\n\nRed light (1): low quality, extensive extrapolation and/or omission and noise, but at least some regions have estimates that are accurate; can be used with caution in certain regions.\nYellow light (2): medium quality, some extrapolation and/or omission; use with caution.\nGreen light (3): high quality, very little or no extrapolation and/or omission; these seasons can be safely used.\n\n\n\n\n\n\n\nExercise\n\n\n\nLook up a species of interest to you. Identify the seasonal dates and the review quality ratings.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nBlue-winged Teal is coded as a migrant with all four seasons receiving quality ratings of 3 suggesting there is very little extrapolation or omission in the estimates.\n\nebirdst_runs %&gt;% \n  filter(common_name == \"Blue-winged Teal\") %&gt;% \n  glimpse()\n#&gt; Rows: 1\n#&gt; Columns: 28\n#&gt; $ species_code                   &lt;chr&gt; \"buwtea\"\n#&gt; $ scientific_name                &lt;chr&gt; \"Spatula discors\"\n#&gt; $ common_name                    &lt;chr&gt; \"Blue-winged Teal\"\n#&gt; $ is_resident                    &lt;lgl&gt; FALSE\n#&gt; $ breeding_quality               &lt;chr&gt; \"3\"\n#&gt; $ breeding_start                 &lt;date&gt; 2022-06-14\n#&gt; $ breeding_end                   &lt;date&gt; 2022-07-12\n#&gt; $ nonbreeding_quality            &lt;chr&gt; \"3\"\n#&gt; $ nonbreeding_start              &lt;date&gt; 2022-12-27\n#&gt; $ nonbreeding_end                &lt;date&gt; 2022-01-25\n#&gt; $ postbreeding_migration_quality &lt;chr&gt; \"3\"\n#&gt; $ postbreeding_migration_start   &lt;date&gt; 2022-07-19\n#&gt; $ postbreeding_migration_end     &lt;date&gt; 2022-12-20\n#&gt; $ prebreeding_migration_quality  &lt;chr&gt; \"3\"\n#&gt; $ prebreeding_migration_start    &lt;date&gt; 2022-02-01\n#&gt; $ prebreeding_migration_end      &lt;date&gt; 2022-06-07\n#&gt; $ resident_quality               &lt;chr&gt; NA\n#&gt; $ resident_start                 &lt;date&gt; NA\n#&gt; $ resident_end                   &lt;date&gt; NA\n#&gt; $ has_trends                     &lt;lgl&gt; TRUE\n#&gt; $ trends_season                  &lt;chr&gt; \"breeding\"\n#&gt; $ trends_region                  &lt;chr&gt; \"north_america\"\n#&gt; $ trends_start_year              &lt;dbl&gt; 2012\n#&gt; $ trends_end_year                &lt;dbl&gt; 2022\n#&gt; $ trends_start_date              &lt;chr&gt; \"06-14\"\n#&gt; $ trends_end_date                &lt;chr&gt; \"07-12\"\n#&gt; $ rsquared                       &lt;dbl&gt; 0.838\n#&gt; $ beta0                          &lt;dbl&gt; 0.456"
  },
  {
    "objectID": "status.html#sec-status-download",
    "href": "status.html#sec-status-download",
    "title": "1  eBird Status Data Products",
    "section": "1.3 Downloading data",
    "text": "1.3 Downloading data\nThe function ebirdst_download_status() downloads eBird Status Data Products for a single species given a species name (common name, scientific name, or species code). For example, to download the data for Blue-winged Teal use:\n\nebirdst_download_status(species = \"Blue-winged Teal\")\n\nThere are a wide variety of data products available for download via ebirdst_download_status(); however, the default behavior of this function is to only download the most commonly used data products: weekly and seasonal estimates of relative abundance. Consult the help for ebirdst_download_status() for details on downloading other data products, for example, range polygons or estimates of occurrence rate.\nebirdst uses a central location on your computer to download and store data. As a data user, the intention is for you to always access eBird Status and Trends Data products through ebirdst rather than interacting with the data directly. You can see where the data are stored with ebirdst_data_dir() and you can change the default download directory by setting the environment variable EBIRDST_DATA_DIR, for example by calling usethis::edit_r_environ() and adding a line such as EBIRDST_DATA_DIR=/custom/download/directory/."
  },
  {
    "objectID": "status.html#sec-status-load",
    "href": "status.html#sec-status-load",
    "title": "1  eBird Status Data Products",
    "section": "1.4 Loading data in R",
    "text": "1.4 Loading data in R\nIn this workshop, we’ll focus on the raster data products, consisting of estimates on a regular grid of square cells. These can all be loaded into R using the ebirdst function load_raster(). In R, we’ll use the terra package to work with raster data. Raster data products fall into two broad categories providing weekly and seasonal estimates.\n\n1.4.1 Weekly raster estimates\nThe core raster data products are the weekly estimates of occurrence, count, relative abundance, and proportion of population. All estimates are the median expected value for a 2 km, 1 hour eBird Traveling Count by an expert eBird observer at the optimal time of day and for optimal weather conditions to observe the given species.\n\nOccurrence occurrence: the expected probability of encountering a species.\nCount count: the expected count of a species, conditional on its occurrence at the given location.\nRelative abundance abundance: the expected relative abundance of a species, computed as the product of the probability of occurrence and the count conditional on occurrence. In addition to the median relative abundance, upper and lower confidence intervals (CIs) are provided, defined at the 10th and 90th quantile of relative abundance, respectively.\nProportion of population proportion-population: the proportion of the total relative abundance within each cell. This is a derived product calculated by dividing each cell value in the relative abundance raster by the sum of all cell values.\n\nAll predictions are made on a standard 3 km x 3 km global grid; however, for convenience lower resolution GeoTIFFs are also provided, which are typically much faster to work with. The three resolutions are:\n\nHigh resolution (3km): the native 3 km resolution data\nMedium resolution (9km): data aggregated by a factor of 3 in each direction resulting in a resolution of 9 km\nLow resolution (27km): data aggregated by a factor of 9 in each direction resulting in a resolution of 27 km\n\nThe first argument to load_raster() is the species (common name, scientific name, or species code) and teh remaining arguments specify which product to load. For example, we can load the relative abundance estimates with:\n\nabd_median &lt;- load_raster(\"buwtea\", product = \"abundance\")\nprint(abd_median)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 5630, 13511, 52  (nrow, ncol, nlyr)\n#&gt; resolution  : 2963, 2963  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6673060, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source      : buwtea_abundance_median_3km_2022.tif \n#&gt; names       : 2022-01-04, 2022-01-11, 2022-01-18, 2022-01-25, 2022-02-01, 2022-02-08, ... \n#&gt; min values  :          0,          0,          0,          0,          0,          0, ... \n#&gt; max values  :        691,        961,        694,       1029,        930,        876, ...\n\nWe often refer to these raster objects as “weekly cubes” (e.g. the “weekly abundance cube”). Notice that the cubes contains 52 layers, corresponding to the weeks of the year. The layer names are the dates associated with the mid-point of each week.\n\nas.Date(names(abd_median))\n#&gt;  [1] \"2022-01-04\" \"2022-01-11\" \"2022-01-18\" \"2022-01-25\" \"2022-02-01\"\n#&gt;  [6] \"2022-02-08\" \"2022-02-15\" \"2022-02-22\" \"2022-03-01\" \"2022-03-08\"\n#&gt; [11] \"2022-03-15\" \"2022-03-22\" \"2022-03-29\" \"2022-04-05\" \"2022-04-12\"\n#&gt; [16] \"2022-04-19\" \"2022-04-26\" \"2022-05-03\" \"2022-05-10\" \"2022-05-17\"\n#&gt; [21] \"2022-05-24\" \"2022-05-31\" \"2022-06-07\" \"2022-06-14\" \"2022-06-21\"\n#&gt; [26] \"2022-06-28\" \"2022-07-05\" \"2022-07-12\" \"2022-07-19\" \"2022-07-26\"\n#&gt; [31] \"2022-08-02\" \"2022-08-09\" \"2022-08-16\" \"2022-08-23\" \"2022-08-30\"\n#&gt; [36] \"2022-09-06\" \"2022-09-13\" \"2022-09-20\" \"2022-09-27\" \"2022-10-04\"\n#&gt; [41] \"2022-10-11\" \"2022-10-18\" \"2022-10-25\" \"2022-11-01\" \"2022-11-08\"\n#&gt; [46] \"2022-11-15\" \"2022-11-22\" \"2022-11-29\" \"2022-12-06\" \"2022-12-13\"\n#&gt; [51] \"2022-12-20\" \"2022-12-27\"\n\nTo load the upper and lower abundance confidence intervals for relative abundance, we can use the metric argument.\n\nabd_lower &lt;- load_raster(\"buwtea\", product = \"abundance\", metric = \"lower\")\nabd_upper &lt;- load_raster(\"buwtea\", product = \"abundance\", metric = \"upper\")\n\n\n\n\n\n\n\nExercise\n\n\n\nTry loading the weekly proportion of population cube at 27 km resolution.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nprop_pop &lt;- load_raster(\"buwtea\", \n                        product = \"proportion-population\", \n                        resolution = \"27km\")\nprint(prop_pop)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 626, 1502, 52  (nrow, ncol, nlyr)\n#&gt; resolution  : 26665, 26665  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6684911, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source      : buwtea_proportion-population_median_27km_2022.tif \n#&gt; names       : 2022-01-04, 2022-01-11, 2022-01-18, 2022-01-25, 2022-02-01, 2022-02-08, ... \n#&gt; min values  :      0.000,     0.0000,     0.0000,     0.0000,     0.0000,     0.0000, ... \n#&gt; max values  :      0.017,     0.0299,     0.0253,     0.0143,     0.0113,     0.0147, ...\n\n\n\n\n\n\n1.4.2 Seasonal raster estimates\nThe seasonal raster estimates are provided for the same set of products and at the same three resolutions as the weekly estimates. They’re derived from the weekly data by taking the cell-wise mean or max across the weeks within each season. Recall that the seasonal boundary dates are available in the data frame ebirdst_runs. Data are not provided for seasons with a quality score of 0.\nThe seasonal data products can be loaded with load_raster(period = \"seasonal\") and the metric argument set to either \"mean\" or \"max\". For example, to load the mean seasonal relative abundance, use\n\nabd_seasonal_mean &lt;- load_raster(\"buwtea\", \n                                 product = \"abundance\", \n                                 period = \"seasonal\", \n                                 metric = \"mean\")\nprint(abd_seasonal_mean)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 5630, 13511, 4  (nrow, ncol, nlyr)\n#&gt; resolution  : 2963, 2963  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6673060, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source      : buwtea_abundance_seasonal_mean_3km_2022.tif \n#&gt; names       : breeding, nonbreeding, prebree~gration, postbre~gration \n#&gt; min values  :      0.0,           0,               0,               0 \n#&gt; max values  :     23.8,         572,             165,             435\n\nNotice there are four layers in this raster corresponding to the four seasons.\n\nnames(abd_seasonal_mean)\n#&gt; [1] \"breeding\"               \"nonbreeding\"            \"prebreeding_migration\" \n#&gt; [4] \"postbreeding_migration\"\n\nFinally, as a convenience, the data products include year-round rasters summarizing the mean or max across all weeks that fall within a season that passed the expert review process. These can be accessed similarly to the seasonal products, just with period = \"full-year\" instead. For example, these layers can be used in conservation planning to assess the most important sites across the full range and full annual cycle of a species.\n\nabd_fy_max &lt;- load_raster(\"buwtea\", \n                          product = \"abundance\", \n                          period = \"full-year\", \n                          metric = \"max\")"
  },
  {
    "objectID": "status.html#sec-status-explore",
    "href": "status.html#sec-status-explore",
    "title": "1  eBird Status Data Products",
    "section": "1.5 Exploring the raster data",
    "text": "1.5 Exploring the raster data\nLet’s load the weekly and seasonal relative abundance cubes and use them to demonstrate some basic raster operations with the data. We’ll use the 9 km estimates for demonstration since they’re faster to process, but in practice you may want to use the 3 km resolution data for increased precision.\n\nabd_weekly &lt;- load_raster(\"buwtea\", product = \"abundance\", resolution = \"9km\")\nabd_seasonal &lt;- load_raster(\"buwtea\", product = \"abundance\", \n                            period = \"seasonal\", resolution = \"9km\")\n\nThese cubes can easily be subset to a single week or season.\n\n# week of may 17\nabd_weekly[[\"2022-05-17\"]]\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 1877, 4504, 1  (nrow, ncol, nlyr)\n#&gt; resolution  : 8888, 8888  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6676023, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source      : buwtea_abundance_median_9km_2022.tif \n#&gt; name        : 2022-05-17 \n#&gt; min value   :        0.0 \n#&gt; max value   :       12.7\n# breeding season\nabd_seasonal[[\"breeding\"]]\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 1877, 4504, 1  (nrow, ncol, nlyr)\n#&gt; resolution  : 8888, 8888  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6676023, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source      : buwtea_abundance_seasonal_mean_9km_2022.tif \n#&gt; name        : breeding \n#&gt; min value   :      0.0 \n#&gt; max value   :     10.6\n\nWe can also subset the weekly cube to a range of weeks. For example, let’s subset to only the estimates for weeks in May, then take the average across the weeks.\n\n# determine which dates we want to include\nweek_dates &lt;- as.Date(names(abd_weekly))\nstart_date &lt;- as.Date(\"2022-05-01\")\nend_date &lt;- as.Date(\"2022-05-31\")\nweek_in_may &lt;- week_dates &gt;= start_date & week_dates &lt;= end_date\n\n# subset to weeks in may\nabd_weekly_may &lt;- abd_weekly[[week_in_may]]\n\n# average across weeks\nmean(abd_weekly_may, na.rm = TRUE)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 1877, 4504, 1  (nrow, ncol, nlyr)\n#&gt; resolution  : 8888, 8888  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6676023, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source(s)   : memory\n#&gt; name        : mean \n#&gt; min value   :  0.0 \n#&gt; max value   : 20.5\n\nMaking a simple map of the data will produce unexpected results. For example, let’s map the non-breeding season relative abundance for Blue-winged Teal.\n\nplot(abd_seasonal[[\"nonbreeding\"]])\n\n\n\n\n\n\n\n\nAll eBird Status Data Products are provided for the entire globe in an esoteric Sinusoidal equal area projection not designed for mapping. Also, notice that some areas, such as the Amazon Basin and High Arctic, have missing values (white in the map) indicating that there was insufficient data to make a prediction in the region. Other areas, such as Central America and Western Europe, have sufficient data to predict that the species is absent (light grey on the map). To produce a more useful map, we can crop and mask the data to a region of interest. For example, let’s spatially subset the non-breeding season relative abundance raster for Blue-winged Teal data to the footprint of the Lower Mississippi Valley Joint Venture (LMVJV).\n\n# polygon for the lower mississipi valley joint venture footprint\n# polygon for the lower mississipi valley joint venture footprint\nlmv_boundary &lt;- paste0(\"https://github.com/ebird/ebirdst-workshop_tws-2023/\",\n                       \"raw/main/data/boundaries.gpkg\") %&gt;% \n  read_sf(layer = \"lmvjv\") %&gt;% \n  st_transform(crs = st_crs(abd_seasonal))\n\n# state boundary polygons for mapping\nstates &lt;- paste0(\"https://github.com/ebird/ebirdst-workshop_tws-2023/\",\n                 \"raw/main/data/boundaries.gpkg\") %&gt;% \n  read_sf(layer = \"states\") %&gt;% \n  st_transform(crs = st_crs(abd_seasonal))\n\n# crop and mask the breeding season relative abundance raster\nabd_breeding_lmv &lt;- crop(abd_seasonal[[\"nonbreeding\"]], lmv_boundary) %&gt;% \n  mask(lmv_boundary)\n\n# map\nplot(abd_breeding_lmv, axes = FALSE)\nplot(st_geometry(states), add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nLet’s take a break before proceeding onto some more realistic applications of the eBird Status data products. Make sure you’re comfortable loading the data into R and performing some of the basic operations."
  },
  {
    "objectID": "status.html#sec-status-applications",
    "href": "status.html#sec-status-applications",
    "title": "1  eBird Status Data Products",
    "section": "1.6 Applications",
    "text": "1.6 Applications\nThe remainder of the workshop will work through two example applications using the eBird Status Data Products:\n\nTrajectories: chart the change in the percent of the population in a region throughout the year for a set of species.\nPrioritization: use eBird Status Data Products to identify important sites for a set of species.\n\n\n1.6.1 Trajectories\nIn this application, we’ll look at the change in populations for two species over the course of the year in the LMVJV. We’ll consider Blue-winged Teal and Canvasback, two migrant species that winter in the region. When comparing multiple species, or a single species between different seasons, it’s important to use the proportion of population rather than relative abundance to mitigate the impact of differences in detectability between seasons and species.\nLet’s start by downloading data for Canvasback (recall we already downloaded the Blue-winged Teal data) and loading the weekly proportion of population cubes for both species. For the remainder of this workshop, we’ll work with the 27 km resolution data to ensure we can download and process data quickly. Below we use pattern = \"_27km_\" to instruct ebirdst_download_status() to only download the 27 km estimates. In real-world applications, you will likely want to use the full 3 km resolution data for higher precision.\n\n# download data\nebirdst_download_status(\"Canvasback\", pattern = \"_27km_\")\n\n# proportion of population cubes\npop_buwtea &lt;- load_raster(\"buwtea\", \n                          product = \"proportion-population\", \n                          resolution = \"9km\")\npop_canvas &lt;- load_raster(\"canvas\", \n                          product = \"proportion-population\", \n                          resolution = \"9km\")\n\nNow, we’ll use the R package exactextractr to calculate the sum of the proportions for each species within the LMVJV.\n\n# calculate total proportion of population within lmvjv\n# blue-winged teal\ntraj_buwtea &lt;- exact_extract(pop_buwtea, lmv_boundary, fun = \"sum\")\ntraj_buwtea &lt;- data.frame(species = \"Blue-winged Teal\",\n                           week = as.Date(names(pop_buwtea)),\n                           prop_pop = as.numeric(traj_buwtea[1, ]))\n# canvasback\ntraj_canvas &lt;- exact_extract(pop_canvas, lmv_boundary, fun = \"sum\")\ntraj_canvas &lt;- data.frame(species = \"Canvasback\",\n                           week = as.Date(names(pop_canvas)),\n                           prop_pop = as.numeric(traj_canvas[1, ]))\n\n# combine\ntrajectories &lt;- bind_rows(traj_buwtea, traj_canvas)\nhead(trajectories)\n#&gt;            species       week prop_pop\n#&gt; 1 Blue-winged Teal 2022-01-04  0.00622\n#&gt; 2 Blue-winged Teal 2022-01-11  0.00885\n#&gt; 3 Blue-winged Teal 2022-01-18  0.00925\n#&gt; 4 Blue-winged Teal 2022-01-25  0.01097\n#&gt; 5 Blue-winged Teal 2022-02-01  0.01298\n#&gt; 6 Blue-winged Teal 2022-02-08  0.01600\n\nFinally we can plot the trajectories.\n\nggplot(trajectories, aes(x = week, y = prop_pop, color = species)) +\n  geom_line() +\n  scale_y_continuous(labels = scales::percent) +\n  labs(x = \"Week\", \n       y = \"% of population\",\n       title = \"Weekly % of population trajectory in LMVJV\",\n       color = NULL) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\n\n1.6.2 Prioritization\nFor the next application, we’ll perform a multi-species site prioritization exercise, identifying important non-breeding sites for a set of four species in the LMVJV: Blue-winged Teal, Canvasback, Mallard, and Virginia Rail. Let’s start by downloading data for species that require it, loading the seasonal proportion of population rasters, cropping to the LMVJV, and combining the rasters across species.\n\n\n\n\n\n\nTip\n\n\n\nRelative abundance estimates are impacted by detection rates, which can vary between species. As a results, when comparing eBird Status and Trends data across species, it’s critical to always use the percent of population layers, which have been standardized by dividing each cell value by the total relative abundance across all cells.\n\n\n\nspecies_list &lt;- c(\"buwtea\", \"canvas\", \"mallard\", \"virrai\")\nproportion_population &lt;- list()\nfor (species in species_list) {\n  # download data where needed, existing files won't be re-downloaded\n  ebirdst_download_status(species, pattern = \"_27km_\")\n  \n  # load seasonal proportion of population\n  pop_seasonal &lt;- load_raster(species, \"proportion-population\", \n                              period = \"seasonal\", \n                              resolution = \"27km\")\n    \n  # subset to the nonbreeding season, crop and mask to lmvjv\n  pop_breeding &lt;- pop_seasonal[[\"nonbreeding\"]] %&gt;% \n    crop(lmv_boundary) %&gt;% \n    mask(lmv_boundary)\n  \n  # combine with other species\n  proportion_population[[species]] &lt;- pop_breeding\n}\n# stack the rasters into a single object\nproportion_population &lt;- rast(proportion_population)\nprint(proportion_population)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 32, 49, 4  (nrow, ncol, nlyr)\n#&gt; resolution  : 26665, 26665  (x, y)\n#&gt; extent      : -9215679, -7909081, 3287904, 4141193  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source(s)   : memory\n#&gt; varnames    : buwtea_proportion-population_seasonal_mean_27km_2022 \n#&gt;               canvas_proportion-population_seasonal_mean_27km_2022 \n#&gt;               mallar3_proportion-population_seasonal_mean_27km_2022 \n#&gt;               ...\n#&gt; names       :   buwtea,  canvas,  mallard,  virrai \n#&gt; min values  : 0.000000, 0.00000, 0.000000, 0.00000 \n#&gt; max values  : 0.000834, 0.00276, 0.000502, 0.00491\n\nThe goal of this exercise is to simultaneously prioritize sites across all four species. To do this, we can take calculate the cell-wise mean proportion of population across the species, which results in a single layer that acts as a proxy for importance.\n\n# importance: mean percent of population across species\nimportance &lt;- mean(proportion_population, na.rm = TRUE)\n\n# plot the square root of importance since the data are right skewed\npar(mar = c(0.25, 0.25, 0.25, 0.25))\nplot(sqrt(importance), axes = FALSE)\nplot(states, add = TRUE)\n\n\n\n\n\n\n\n\nThe absolute numbers in this map are challenging to interpret (they’re the mean proportion of the population across the four species in each cell). Instead, the values should be interpreted in relative terms, giving the relative importance of each cell for this set of four species.\nFor the sake of this example, let’s identify the top 10% of grid cells within the LMVJV for these four species.\n\n# identify the 90th quantile of importance\nq90 &lt;- global(importance, fun = quantile, probs = 0.9, na.rm = TRUE) %&gt;% \n  as.numeric()\n\n# reclassify the importance raster to highlight the top cells\ntop_cells &lt;- as.numeric(importance &gt;= q90)\n\nFinally, let’s make a basic map showing the selected sites in green.\n\npar(mar = c(0.25, 0.25, 0.25, 0.25))\nplot(top_cells, axes = FALSE, legend = FALSE)\nplot(states, add = TRUE)"
  }
]