---
output: html_document
editor:
    mode: source
editor_options: 
  chunk_output_type: console
---

# eBird Status Data Products {#sec-status}

The [eBird Status and Trends](https://science.ebird.org/en/status-and-trends) project uses full-annual cycle machine-learning models combining eBird data with remote-sensing data and accounting for variation in observer behavior and effort to produce high resolution, weekly estimates of range boundaries, occurrence rate, and relative abundance of bird species. The latest version, with estimates for the year 2022, includes results for 1,113 species globally. Interactive visualizations for these species are available through the [eBird Status and Trends website](https://science.ebird.org/en/status-and-trends) and the eBird Status Data Products are available through the R package [`ebirdst`](https://ebird.github.io/ebirdst/).

This workshop will introduce attendees to the eBird Status Data Products and the `ebirdst` R package developed specifically for working with these data. We will introduce attendees to the range of available data, then demonstrate how to download these data products and load them into R for further analysis. Next we'll work through a series of applications. Let's start by loading the packages we'll use throughout this workshop.

```{r}
#| label: status-packages
library(dplyr)
library(exactextractr)
library(ggplot2)
library(sf)
library(terra)
library(ebirdst)
```

## Data access {#sec-status-access}

Access to the eBird Status Data Products is granted through an Access Request Form at: <https://ebird.org/st/request>. The terms of use have been desiged to be quite permissive in many cases, particularly academic and research use. After reading the [eBird Status and Trends Data Products Terms of Use](https://ebird.org/science/status-and-trends/st-data-access-terms-of-use/) and filling out the [Access Request Form](https://ebird.org/st/request) you will be provided with an alphanumeric access key. To store the access key so it can be accessed by R and the `ebirdst` package, run the following (replacing `"XXXXXXXXX"` with your actual key):

```{r}
#| label: status-access-key
#| eval: false
set_ebirdst_access_key("XXXXXXXXX")
```

This will save the access key as the environment variable `EBIRDST_KEY` in your `.Renviron` file so it's accessible within your R session. **You only need to do this once to store the key.**

::: callout-important
## Checkpoint

To ensure your data access key is working, attempt run the following code, which will two small files. Speak to the instructor if this doesn't work.

```{r}
#| label: status-access-sol
#| eval: false
ebirdst_download_status("buwtea", 
                        pattern = "abundance_median_27km_2022", 
                        force = TRUE)
```
:::

## Status and Trends species {#sec-status-species}

The `ebirdst_runs` object is a data frame listing all the available species:

```{r species}
#| label: status-species-runs
glimpse(ebirdst_runs)
```

If you're working in RStudio, you can use `View()` to interactively explore this data frame. Note that several of the columns at the end of this data frame are related to trends, which we'll cover in the [next section](trends.qmd).

### Expert review {#sec-status-review}

All species go through a process of expert human review prior to being released. The `ebirdst_runs` data frame also contains information from this review process. Reviewers assess each of the four seasons: breeding, non-breeding, pre-breeding migration, and post-breeding migration. Resident (i.e., non-migratory) species are identified by having `TRUE` in the `resident` column of `ebirdst_runs`, and these species are assessed across the whole year rather than seasonally. `ebirdst_runs` contains two important pieces of information for each season: a **quality** rating and **seasonal dates**.

The **seasonal dates** define the weeks that fall within each season; the relative abundance estimates for these weeks get averaged to produce the seasonal relative abundance maps on the Status and Trends website. Breeding and non-breeding season dates are defined for each species as the weeks during those seasons when the species' population does not move. For this reason, these seasons are also described as stationary periods. Migration periods are defined as the periods of movement between the stationary non-breeding and breeding seasons. Note that for many species these migratory periods include not only movement from breeding grounds to non-breeding grounds, but also post-breeding dispersal, molt migration, and other movements.

Reviewers also examine the model estimates for each season to assess the amount of extrapolation or omission present in the model, and assign an associated **quality** rating ranging from 0 (lowest quality) to 3 (highest quality). Extrapolation refers to cases where the model predicts occurrence where the species is known to be absent, while omission refers to the model failing to predict occurrence where a species is known to be present.

A rating of 0 implies this season failed review and model results should not be used at all for this period. Ratings of 1-3 correspond to a gradient of more to less extrapolation and/or omission, and we often use a traffic light analogy when referring to them:

1.  [**Red light (1)**]{style="color:#f20a02"}: low quality, extensive extrapolation and/or omission and noise, but at least some regions have estimates that are accurate; can be used with caution in certain regions.
2.  [**Yellow light (2)**]{style="color:#f2ea49"}: medium quality, some extrapolation and/or omission; use with caution.
3.  [**Green light (3)**]{style="color:#00cc25"}: high quality, very little or no extrapolation and/or omission; these seasons can be safely used.

::: {.callout-caution icon="false"}
## Exercise

Look up a species of interest to you. Identify the seasonal dates and the review quality ratings.
:::

::: {.callout-note icon="false" collapse="true"}
## Solution

Blue-winged Teal is coded as a migrant with all four seasons receiving quality ratings of 3 suggesting there is very little extrapolation or omission in the estimates.

```{r}
#| label: status-review-sol
ebirdst_runs %>% 
  filter(common_name == "Blue-winged Teal") %>% 
  glimpse()
```
:::

## Downloading data {#sec-status-download}

The function `ebirdst_download_status()` downloads eBird Status Data Products for a single species given a species name (common name, scientific name, or species code). For example, to download the data for Blue-winged Teal use:

```{r}
#| label: status-download-fake
#| eval: false
ebirdst_download_status(species = "Blue-winged Teal")
```

There are a wide variety of data products available for download via `ebirdst_download_status()`; however, the default behavior of this function is to only download the most commonly used data products: weekly and seasonal estimates of relative abundance. Consult the help for `ebirdst_download_status()` for details on downloading other data products, for example, range polygons or estimates of occurrence rate.

`ebirdst` uses a central location on your computer to download and store data. As a data user, the intention is for you to always access eBird Status and Trends Data products through `ebirdst` rather than interacting with the data directly. You can see where the data are stored with `ebirdst_data_dir()` and you can change the default download directory by setting the environment variable `EBIRDST_DATA_DIR`, for example by calling `usethis::edit_r_environ()` and adding a line such as `EBIRDST_DATA_DIR=/custom/download/directory/`.

## Loading data in R {#sec-status-load}

In this workshop, we'll focus on the raster data products, consisting of estimates on a regular grid of square cells. These can all be loaded into R using the `ebirdst` function `load_raster()`. In R, we'll use the `terra` package to work with raster data. Raster data products fall into two broad categories providing weekly and seasonal estimates.

### Weekly raster estimates {#sec-status-load-weekly}

The core raster data products are the weekly estimates of occurrence, count, relative abundance, and proportion of population. All estimates are the median expected value for a 2 km, 1 hour eBird Traveling Count by an expert eBird observer at the optimal time of day and for optimal weather conditions to observe the given species.

-   **Occurrence** `occurrence`: the expected probability of encountering a species.
-   **Count** `count`: the expected count of a species, conditional on its occurrence at the given location.
-   **Relative abundance** `abundance`: the expected relative abundance of a species, computed as the product of the probability of occurrence and the count conditional on occurrence. In addition to the median relative abundance, upper and lower confidence intervals (CIs) are provided, defined at the 10th and 90th quantile of relative abundance, respectively.
-   **Proportion of population** `proportion-population`: the proportion of the total relative abundance within each cell. This is a derived product calculated by dividing each cell value in the relative abundance raster by the sum of all cell values.

All predictions are made on a standard 3 km x 3 km global grid; however, for convenience lower resolution GeoTIFFs are also provided, which are typically much faster to work with. The three resolutions are:

-   High resolution (`3km`): the native 3 km resolution data
-   Medium resolution (`9km`): data aggregated by a factor of 3 in each direction resulting in a resolution of 9 km
-   Low resolution (`27km`): data aggregated by a factor of 9 in each direction resulting in a resolution of 27 km

The first argument to `load_raster()` is the species (common name, scientific name, or species code) and teh remaining arguments specify which product to load. For example, we can load the relative abundance estimates with:

```{r}
#| label: status-load-weekly-abd
abd_median <- load_raster("buwtea", product = "abundance")
print(abd_median)
```

We often refer to these raster objects as "weekly cubes" (e.g. the "weekly abundance cube"). Notice that the cubes contains 52 layers, corresponding to the weeks of the year. The layer names are the dates associated with the mid-point of each week.

```{r}
#| label: status-load-weekly-parse
as.Date(names(abd_median))
```

To load the upper and lower abundance confidence intervals for relative abundance, we can use the `metric` argument.

```{r}
#| label: status-load-weekly-ci
abd_lower <- load_raster("buwtea", product = "abundance", metric = "lower")
abd_upper <- load_raster("buwtea", product = "abundance", metric = "upper")
```

::: {.callout-caution icon="false"}
## Exercise

Try loading the weekly proportion of population cube at 27 km resolution.
:::

::: {.callout-note icon="false" collapse="true"}
## Solution

```{r}
#| label: status-load-weekly-sol
prop_pop <- load_raster("buwtea", 
                        product = "proportion-population", 
                        resolution = "27km")
print(prop_pop)
```
:::

### Seasonal raster estimates {#sec-status-load-seasonal}

The seasonal raster estimates are provided for the same set of products and at the same three resolutions as the weekly estimates. They're derived from the weekly data by taking the cell-wise mean or max across the weeks within each season. Recall that the seasonal boundary dates are available in the data frame `ebirdst_runs`. Data are not provided for seasons with a quality score of 0.

The seasonal data products can be loaded with `load_raster(period = "seasonal")` and the `metric` argument set to either `"mean"` or `"max"`. For example, to load the mean seasonal relative abundance, use

```{r}
#| label: status-load-seasonal-abd
abd_seasonal_mean <- load_raster("buwtea", 
                                 product = "abundance", 
                                 period = "seasonal", 
                                 metric = "mean")
print(abd_seasonal_mean)
```

Notice there are four layers in this raster corresponding to the four seasons.

```{r}
#| label: status-load-seasonal-seasons
names(abd_seasonal_mean)
```

Finally, as a convenience, the data products include year-round rasters summarizing the mean or max across all weeks that fall within a season that passed the expert review process. These can be accessed similarly to the seasonal products, just with `period = "full-year"` instead. For example, these layers can be used in conservation planning to assess the most important sites across the full range and full annual cycle of a species.

```{r}
#| label: status-load-seasonal-fy
abd_fy_max <- load_raster("buwtea", 
                          product = "abundance", 
                          period = "full-year", 
                          metric = "max")
```

## Exploring the raster data {#sec-status-explore}

Let's load the weekly and seasonal relative abundance cubes and use them to demonstrate some basic raster operations with the data. We'll use the 9 km estimates for demonstration since they're faster to process, but in practice you may want to use the 3 km resolution data for increased precision.

```{r}
#| label: status-explore-load
abd_weekly <- load_raster("buwtea", product = "abundance", resolution = "9km")
abd_seasonal <- load_raster("buwtea", product = "abundance", 
                            period = "seasonal", resolution = "9km")
```

These cubes can easily be subset to a single week or season.

```{r}
#| label: status-explore-subset
# week of may 17
abd_weekly[["2022-05-17"]]
# breeding season
abd_seasonal[["breeding"]]
```

We can also subset the weekly cube to a range of weeks. For example, let's subset to only the estimates for weeks in May, then take the average across the weeks.

```{r}
#| label: status-explore-mean
# determine which dates we want to include
week_dates <- as.Date(names(abd_weekly))
start_date <- as.Date("2022-05-01")
end_date <- as.Date("2022-05-31")
week_in_may <- week_dates >= start_date & week_dates <= end_date

# subset to weeks in may
abd_weekly_may <- abd_weekly[[week_in_may]]

# average across weeks
mean(abd_weekly_may, na.rm = TRUE)
```

Making a simple map of the data will produce unexpected results. For example, let's map the non-breeding season relative abundance for Blue-winged Teal.

```{r}
#| label: status-explore-map
plot(abd_seasonal[["nonbreeding"]])
```

All eBird Status Data Products are provided for the entire globe in an esoteric Sinusoidal equal area projection not designed for mapping. Also, notice that some areas, such as the Amazon Basin and High Arctic, have missing values (white in the map) indicating that there was insufficient data to make a prediction in the region. Other areas, such as Central America and Western Europe, have sufficient data to predict that the species is absent (light grey on the map). To produce a more useful map, we can crop and mask the data to a region of interest. For example, let's spatially subset the non-breeding season relative abundance raster for Blue-winged Teal data to the footprint of the Lower Mississippi Valley Joint Venture (LMVJV).

```{r}
#| label: status-explore-mvjv
# polygon for the lower mississipi valley joint venture footprint
# polygon for the lower mississipi valley joint venture footprint
lmv_boundary <- paste0("https://github.com/ebird/ebirdst-workshop_tws-2023/",
                       "raw/main/data/boundaries.gpkg") %>% 
  read_sf(layer = "lmvjv") %>% 
  st_transform(crs = st_crs(abd_seasonal))

# state boundary polygons for mapping
states <- paste0("https://github.com/ebird/ebirdst-workshop_tws-2023/",
                 "raw/main/data/boundaries.gpkg") %>% 
  read_sf(layer = "states") %>% 
  st_transform(crs = st_crs(abd_seasonal))

# crop and mask the breeding season relative abundance raster
abd_breeding_lmv <- crop(abd_seasonal[["nonbreeding"]], lmv_boundary) %>% 
  mask(lmv_boundary)

# map
plot(abd_breeding_lmv, axes = FALSE)
plot(st_geometry(states), add = TRUE)
```

::: callout-important
## Checkpoint

Let's take a break before proceeding onto some more realistic applications of the eBird Status data products. Make sure you're comfortable loading the data into R and performing some of the basic operations.
:::

## Applications {#sec-status-applications}

The remainder of the workshop will work through two example applications using the eBird Status Data Products:

1.  [Trajectories](#sec-status-applications-trajectories): chart the change in the percent of the population in a region throughout the year for a set of species.
2.  [Prioritization](#sec-status-applications-prioritization): use eBird Status Data Products to identify important sites for a set of species.

### Trajectories {#sec-status-applications-trajectories}

In this application, we'll look at the change in populations for two species over the course of the year in the LMVJV. We'll consider Blue-winged Teal and Canvasback, two migrant species that winter in the region. When comparing multiple species, or a single species between different seasons, it's important to use the proportion of population rather than relative abundance to mitigate the impact of differences in detectability between seasons and species.

Let's start by downloading data for Canvasback (recall we already downloaded the Blue-winged Teal data) and loading the weekly proportion of population cubes for both species. For the remainder of this workshop, we'll work with the 27 km resolution data to ensure we can download and process data quickly. Below we use `pattern = "_27km_"` to instruct `ebirdst_download_status()` to only download the 27 km estimates. In real-world applications, you will likely want to use the full 3 km resolution data for higher precision.

```{r}
#| label: status-applications-trajectories-data
# download data
ebirdst_download_status("Canvasback", pattern = "_27km_")

# proportion of population cubes
pop_buwtea <- load_raster("buwtea", 
                          product = "proportion-population", 
                          resolution = "9km")
pop_canvas <- load_raster("canvas", 
                          product = "proportion-population", 
                          resolution = "9km")
```

Now, we'll use the R package `exactextractr` to calculate the sum of the proportions for each species within the LMVJV.

```{r}
#| label: status-applications-trajectories-summarize
# calculate total proportion of population within lmvjv
# blue-winged teal
traj_buwtea <- exact_extract(pop_buwtea, lmv_boundary, fun = "sum")
traj_buwtea <- data.frame(species = "Blue-winged Teal",
                           week = as.Date(names(pop_buwtea)),
                           prop_pop = as.numeric(traj_buwtea[1, ]))
# canvasback
traj_canvas <- exact_extract(pop_canvas, lmv_boundary, fun = "sum")
traj_canvas <- data.frame(species = "Canvasback",
                           week = as.Date(names(pop_canvas)),
                           prop_pop = as.numeric(traj_canvas[1, ]))

# combine
trajectories <- bind_rows(traj_buwtea, traj_canvas)
head(trajectories)
```

Finally we can plot the trajectories.

```{r}
#| label: status-applications-trajectories-plot
ggplot(trajectories, aes(x = week, y = prop_pop, color = species)) +
  geom_line() +
  scale_y_continuous(labels = scales::percent) +
  labs(x = "Week", 
       y = "% of population",
       title = "Weekly % of population trajectory in LMVJV",
       color = NULL) +
  theme(legend.position = "bottom")
```

### Prioritization {#sec-status-applications-prioritization}

For the next application, we'll perform a multi-species site prioritization exercise, identifying important non-breeding sites for a set of four species in the LMVJV: Blue-winged Teal, Canvasback, Mallard, and Virginia Rail. Let's start by downloading data for species that require it, loading the seasonal proportion of population rasters, cropping to the LMVJV, and combining the rasters across species.

::: callout-tip
## Tip

Relative abundance estimates are impacted by detection rates, which can vary between species. As a results, when comparing eBird Status and Trends data across species, it's critical to always use the percent of population layers, which have been standardized by dividing each cell value by the total relative abundance across all cells.
:::


```{r}
#| label: status-applications-prioritization-import
species_list <- c("buwtea", "canvas", "mallard", "virrai")
proportion_population <- list()
for (species in species_list) {
  # download data where needed, existing files won't be re-downloaded
  ebirdst_download_status(species, pattern = "_27km_")
  
  # load seasonal proportion of population
  pop_seasonal <- load_raster(species, "proportion-population", 
                              period = "seasonal", 
                              resolution = "27km")
    
  # subset to the nonbreeding season, crop and mask to lmvjv
  pop_breeding <- pop_seasonal[["nonbreeding"]] %>% 
    crop(lmv_boundary) %>% 
    mask(lmv_boundary)
  
  # combine with other species
  proportion_population[[species]] <- pop_breeding
}
# stack the rasters into a single object
proportion_population <- rast(proportion_population)
print(proportion_population)
```

The goal of this exercise is to simultaneously prioritize sites across all four species. To do this, we can take calculate the cell-wise mean proportion of population across the species, which results in a single layer that acts as a proxy for importance.

```{r}
#| label: status-applications-prioritization-importance
# importance: mean percent of population across species
importance <- mean(proportion_population, na.rm = TRUE)

# plot the square root of importance since the data are right skewed
par(mar = c(0.25, 0.25, 0.25, 0.25))
plot(sqrt(importance), axes = FALSE)
plot(states, add = TRUE)
```

The absolute numbers in this map are challenging to interpret (they're the mean proportion of the population across the four species in each cell). Instead, the values should be interpreted in relative terms, giving the relative importance of each cell for this set of four species.

For the sake of this example, let's identify the top 10% of grid cells within the LMVJV for these four species.

```{r}
#| label: status-applications-prioritization-top
# identify the 90th quantile of importance
q90 <- global(importance, fun = quantile, probs = 0.9, na.rm = TRUE) %>% 
  as.numeric()

# reclassify the importance raster to highlight the top cells
top_cells <- as.numeric(importance >= q90)
```

Finally, let's make a basic map showing the selected sites in green.

```{r}
#| label: status-applications-prioritization-maps
par(mar = c(0.25, 0.25, 0.25, 0.25))
plot(top_cells, axes = FALSE, legend = FALSE)
plot(states, add = TRUE)
```
